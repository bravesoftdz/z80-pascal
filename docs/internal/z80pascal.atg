COMPILER Z80Pascal
(* Z80-Pascal compiler description.  This file MUST be synchronized with the
   one in the src/compiler directory and vice versa.

   This grammar is not LL(1).

   Pascal keywords in uppercase to easy identification.

   Note that this Pascal description is an adaptation, not strict Pascal.  Some
   of the differences are:

   - Not input/output files at "PROGRAM".
   - Not label and "goto" allowed.
   - ASM..END for Z80 assembler added.

 *)

IGNORE CASE

CHARACTERS
  eol      = CHR(13) .
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  alfanum  = letter + digit .
  noQuote1 = ANY - "'" - eol .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  =  letter { alfanum } .
  integer     =  digit { digit } | digit { digit }  CONTEXT ("..") .
  hexinteger  =  "$" hexdigit { hexdigit } .
  real        =  digit { digit } "." digit { digit }
                 [ "E" ["+" | "-"] digit { digit } ]
                 |  digit { digit } "E" ["+" | "-"] digit { digit }  .
  string      = "'" { noQuote1 | "''" } "'" .

PRODUCTIONS

(* Target can be either a program or an unit.  Current version parses only
   programs. *)
  Z80Pas            = PascalProgram .

  PascalProgram     = "PROGRAM"  NewIdent ";"
                      Block "." .

  Block             =  DeclarationPart StatementPart .

  DeclarationPart   = ConstDefinitions
                      TypeDefinitions VarDeclarations
                      { ProcDeclarations } .

(* -------------------------------------------------------------------- *)

  ConstDefinitions  = [ "CONST" ConstDef { ConstDef } ] .

  ConstDef          = NewIdent "=" Constant ";" .

  Constant          = [ "+" | "-" ] ( UnsignedNumber | ConstIdent ) | String .

  UnsignedNumber    = UnsignedInt | UnsignedReal .

  ConstIdent        = identifier .

(* -------------------------------------------------------------------- *)

  TypeDefinitions   = [ "TYPE" TypeDef { TypeDef } ] .

  TypeDef           = NewIdent "=" Type ";" .

  Type              = SimpleType | [ "PACKED" ] StructType | "^" TypeIdent .

  SimpleType        = TypeIdent | EnumerationType | SubrangeType .

  TypeIdent         = identifier .

  EnumerationType   = "(" NewIdentList ")" .

  SubrangeType      = Constant ".." Constant .

  StructType        = ArrayType | RecordType | SetType | FileType .

  ArrayType         = "ARRAY" "[" IndexList "]" "OF" Type .

  IndexList         = SimpleType { "," SimpleType } .

  RecordType        = "RECORD" FieldList "END" .

  SetType           = "SET" "OF" SimpleType .

  FileType          = "FILE" "OF" Type .

  FieldList         = [ ( fixedPart [ ";" VariantPart ] | VariantPart ) [ ";" ] ] .

  fixedPart         = RecordSection { ";" RecordSection } .

  RecordSection     = NewIdentList ":" Type .

  VariantPart       = "CASE" VariantSelector "OF" Variant { ";" Variant } .

  VariantSelector   = [ NewIdent ":" ] TypeIdent .

  Variant           = CaseLabelList ":" "(" FieldList ")" .

(* -------------------------------------------------------------------- *)

  VarDeclarations   = [ "VAR" VarDecl { VarDecl } ] .

  VarDecl           = NewIdentList ":" Type ";" .

(* -------------------------------------------------------------------- *)

  ProcDeclarations  = ( ProcHeading | FuncHeading ) ";" Body ";" .

  ProcHeading       = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading       = "FUNCTION" NewIdent [ FormalParams ] ReturnType .

  ReturnType        = [ (* empty if forward referenced *) ":" TypeIdent ] .

  Body              = Block | "FORWARD" .

  FormalParams      = "(" FormalSection { ";" FormalSection } ")"  .

  FormalSection     = [ "VAR" ] ParamGroup | ProcHeading | FuncHeading .

  ParamGroup        = NewIdentList ":" ParamType .

  ParamType         =   TypeIdent
                      | "ARRAY" "[" IndexSpecList "]" "OF" ParamType
                      | "PACKED" "ARRAY" "[" IndexSpec "]" "OF" TypeIdent .

  IndexSpecList     = IndexSpec { ";" IndexSpec } .

  IndexSpec         = NewIdent ".." NewIdent ":" TypeIdent .

(* -------------------------------------------------------------------- *)

  StatementPart     = CompoundStatement | ASMCompoundStatement .

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | ASMCompoundStatement
                        | WhileStatement
                        | RepeatStatement
                        | IfStatement
                        | CaseStatement
                        | ForStatement
                        | WithStatement ] .

  AssignmentOrCall  = Designator ( ":=" Value | [ ActualParams ] ) .

  Value             = ( "@" Designator ) | Expression .

  ActualParams      = "(" ActualParameter { "," ActualParameter } ")" .

  ActualParameter   = Value [ FieldWidth (* only in i/o *) ] .

  FieldWidth        = ":" IntegerExpression [ ":" IntegerExpression ] .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  RepeatStatement   = "REPEAT" StatementSequence "UNTIL" BooleanExpression .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

  CaseStatement     = "CASE" OrdinalExpression "OF" CaseList "END" .

  CaseList          = OneCase { ";" OneCase } [ ";" ] .

  OneCase           = CaseLabelList ":" Statement .

  CaseLabelList     = CaseLabel { "," CaseLabel } .

  CaseLabel         = Constant .

  ForStatement      = "FOR" ControlVariable ":=" OrdinalExpression
                      ( "TO" | "DOWNTO" ) OrdinalExpression "DO" Statement .

  ControlVariable   = identifier .

  WithStatement     = "WITH" RecVarList "DO" Statement .

  RecVarList        = Designator { "," Designator } .

(* -------------------------------------------------------------------- *)

  IntegerExpression = Expression .

  BooleanExpression = Expression .

  OrdinalExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" | "IN" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" .

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | SetConstructor
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = identifier { "." identifier | "[" ExpList "]" | "^" } .

  ExpList           = Expression { "," Expression } .

  UnsignedLiteral   = UnsignedNumber | "NIL" | String .

  SetConstructor    = "[" Member { "," Member } "]" .

  Member            = Expression [ ".." Expression ] .

(* -------------------------------------------------------------------- *)

(* This is a Z80 Assembler parser.  Note that it allows illegal assembler
   instructions! *)

  ASMCompoundStatement = "ASM" Z80StatementSequence "END" .

  Z80StatementSequence = Z80Statement { ";" Z80Statement } .

  Z80Statement         = Z80Instruction [ Z80Parameter [ "," Z80Parameter ] ] .

  Z80Instruction       = "ADC" | "ADD" | "AND" | "BIT" | "CALL" | "CCF" | "CP" | "CPD" | "CPDR" | "CPI" | "CPIR" | "CPL" | "DAA" | "DEC" | "DI" | "DJNZ," | "EI" | "EX" | "EXX" | "HALT" | "IM" | "IN" | "INC" | "IND" | "INDR" | "INI" | "INIR" | "JP" | "JR" | "LD" | "LDD" | "LDDR" | "LDI" | "LDIR" | "NEG" | "NOP" | "OR" | "OTDR" | "OTIR" | "OUT" | "OUTD" | "OUTI" | "POP" | "PUSH" | "RES" | "RET" | "RETI" | "RETN" | "RL" |"RLA" | "RLC" | "RLCA" | "RLD" | "RR" | "RRA" | "RRC" | "RRD" | "RST" | "SCF" | "SET" | "SLA" | "SRA" | "SBC" | "SUB" | "XOR" .

  Z80Parameter         =   Z80Integer
                         | Z80Condition
                         | Z80Indirection
                         | Z80Register .

  Z80Integer           =   integer | hexinteger .

  Z80Condition         =  "M" | "NC" | "NP" | "NZ" | "P" | "PE" | "PO" | "Z" . (* Carriage exactly the same than register ("C"). *)

  Z80Indirection       = "[" ( "BC" | "DE" | "HL" | Z80Integer | ( ( "IX" | "IY" ) "+" Z80Integer ) ) "]" .

  Z80Register          =  Z80Register8bit | Z80Register16bit .

  Z80Register8bit      =   "A"
                         | "H"
                         | "L"
                         | "B"
                         | "C"
                         | "D"
                         | "E" .

  Z80Register16bit     =   "AF"
                         | "HL" | "BC"
                         | "DE"
                         | "IX"
                         | "IY"
                         | "SP"
                         | "PC" .

(* -------------------------------------------------------------------- *)

  NewIdentList      = NewIdent { "," NewIdent } .

  NewIdent          = identifier .

  UnsignedInt       = integer | hexinteger .

  UnsignedReal      = real .

  String            = string .

END Z80Pas.
