COMPILER Z80Pascal
// Z80-Pascal compiler description.
//
// This grammar is not LL(1) !!  See the TODO lines at CaseStatement.
//
// Pascal keywords in uppercase to easy identification.
//
// Note that this Pascal description is an adaptation, not strict Pascal.  Some
// of the differences are:
//
// - Not input/output files at "PROGRAM".
// - Not label and "GOTO" allowed.
// - ASM..END for Z80 assembler added.

IGNORE CASE

CHARACTERS
  eol       = CHR(13) . // Use also CHR(10) and CHR(13)CHR(10).
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit     = "0123456789" .
  hexdigit   = digit + "ABCDEFabcdef" .
  noQuote   = ANY - "'" - eol .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  = ( letter | "_") { letter | "_" | digit } .
  integer     = digit { digit } | digit { digit }  CONTEXT ("..") .
  hexinteger  =  "$" hexdigit { hexdigit } .
  real        =  digit { digit } "." digit { digit } .
  string      = "'" { noQuote | "''" } "'" .

PRODUCTIONS

  Z80Pascal        = PascalProgram | PascalUnit .

  PascalProgram    = "PROGRAM" NewIdent ";" Block "." .

  PascalUnit       = "UNIT" NewIdent ";" 
                     InterfaceDecl
                     ImplementDecl
                     "END" "." .

  InterfaceDecl    = "INTERFACE" Declarations .

  ImplementDecl    = "IMPLEMENTATION" Declarations .

  Block            = Declarations StatementPart .

  DeclarationPart  = UnitDefinitions ConstDefinitions
                     TypeDefinitions VarDeclarations
                     { ProcDeclarations } .

  UnitDefinitions  = [ "USES" IdentList ";" ] .

//////////////////////////////////////////////////////////////////////////

  ConstDefinitions = [ "CONST" ConstDef { ConstDef } ] .

  ConstDef         = Identifier "=" Constant ";" .

  Constant         = [ "+" | "-" ] ( UnsignedNumber | ConstIdent ) | String .

  UnsignedNumber   = UnsignedInt | UnsignedReal .

//////////////////////////////////////////////////////////////////////////

  TypeDefinitions = [ "TYPE" TypeDef { TypeDef } ] .

  TypeDef         = NewIdent "=" Type ";" .

  Type            = SimpleType | [ "PACKED" ] StructType | "^" TypeIdent .

  SimpleType      = EnumerationType | SubrangeType | TypeIdent .

  TypeIdent       = "BOOLEAN" | "BYTE" | "CHAR" | "WORD" | "INTEGER" | "REAL" | "STRING" | Identifier .

  EnumerationType = "(" IdentList ")" .

  SubrangeType    = Constant ".." Constant .

  StructType      = ArrayType | RecordType | SetType | FileType .

  ArrayType       = "ARRAY" "[" IndexList "]" "OF" Type .

  IndexList       = SimpleType { "," SimpleType } .

  RecordType      = "RECORD" FieldList "END" .

  SetType         = "SET" "OF" SimpleType .

  FileType        = "FILE" "OF" Type .

  FieldList       = [ IdentList ":" Type ] .

//////////////////////////////////////////////////////////////////////////

  VarDeclarations = [ "VAR" VarDecl { VarDecl } ] .

  VarDecl         = IdentList ":" Type ";" .

//////////////////////////////////////////////////////////////////////////

  ProcDeclarations = ( ProcHeading | FuncHeading ) ";" Body ";" .

  ProcHeading      = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading      = "FUNCTION" NewIdent [ FormalParams ] ReturnType .

  ReturnType       = ":" TypeIdent .

  Body             = "FORWARD" | Block .

  FormalParams     = "(" [ FPSection { ";" FPSection } ] ")"  .

  FPSection        = [ "VAR" ] IdentList ":" Type .

//////////////////////////////////////////////////////////////////////////

  StatementPart     = CompoundStatement | ASMCompoundStatement .

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | ASMCompoundStatement
                        | WhileStatement
                        | RepeatStatement
                        | IfStatement
                        | CaseStatement
                        | ForStatement
                        | WithStatement ] .

  AssignmentOrCall  = Designator ( ":=" Value | [ ActualParams ] ) .

  Value             = ( "@" Designator ) | Expression .

  ActualParams      = "(" Expression { "," Expression } ")" .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  RepeatStatement   = "REPEAT" StatementSequence "UNTIL" BooleanExpression .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

  CaseStatement     = "CASE" OrdinalExpression "OF" CaseList "END" .

(* TODO: Next rules makes this not a LL(1) but a LL(n) ! *)

  CaseList          = OneCase { ";" OneCase } [ ";" ] .

  OneCase           = CaseLabelList ":" Statement .

  CaseLabelList     = CaseLabel { "," CaseLabel } .

  CaseLabel         = Constant .

(* TODO: Previous rules makes this not a LL(1) but a LL(n) ! *)

  ForStatement      = "FOR" ControlVariable ":=" OrdinalExpression
                      ( "TO" | "DOWNTO" ) OrdinalExpression "DO" Statement .

  ControlVariable   = Identifier .

  WithStatement     = "WITH" RecVarList "DO" Statement .

  RecVarList        = Designator { "," Designator } .

//////////////////////////////////////////////////////////////////////////

  IntegerExpression = Expression .

  BooleanExpression = Expression .

  OrdinalExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" | "IN" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" .

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | SetConstructor
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = identifier { "." identifier | "[" ExpList "]" | "^" } .

  ExpList           = Expression { "," Expression } .

  UnsignedLiteral   = UnsignedNumber | "NIL" | String .

  SetConstructor    = "[" Member { "," Member } "]" .

  Member            = Expression [ ".." Expression ] .

//////////////////////////////////////////////////////////////////////////

(* This is a simple Z80 Assembler parser.  Note that it allows illegal
   assembler instructions! *)

(* TODO: Revisit this section. *)

  ASMCompoundStatement = "ASM" [Z80StatementSequence] "END" .

  Z80StatementSequence = Z80Statement { ";" Z80Statement } .

  Z80Statement         = Z80Instruction [ Z80Parameter [ "," Z80Parameter ] ] .

  Z80Instruction       = "ADC" | "ADD" | "AND" | "BIT" | "CALL" | "CCF" | "CP" | "CPD" | "CPDR" | "CPI" | "CPIR" | "CPL" | "DAA" | "DEC" | "DI" | "DJNZ," | "EI" | "EX" | "EXX" | "HALT" | "IM" | "IN" | "INC" | "IND" | "INDR" | "INI" | "INIR" | "JP" | "JR" | "LD" | "LDD" | "LDDR" | "LDI" | "LDIR" | "NEG" | "NOP" | "OR" | "OTDR" | "OTIR" | "OUT" | "OUTD" | "OUTI" | "POP" | "PUSH" | "RES" | "RET" | "RETI" | "RETN" | "RL" |"RLA" | "RLC" | "RLCA" | "RLD" | "RR" | "RRA" | "RRC" | "RRD" | "RST" | "SCF" | "SET" | "SLA" | "SRA" | "SBC" | "SUB" | "XOR" .

  Z80Parameter         =   Z80Integer
                         | Z80Condition
                         | Z80Indirection
                         | Z80Register .

  Z80Integer           =   integer | hexinteger .

  Z80Condition         =  "M" | "NC" | "NP" | "NZ" | "P" | "PE" | "PO" | "Z" . (* Carriage exactly the same than register ("C"). *)

  Z80Indirection       = "[" ( "BC" | "DE" | "HL" | Z80Integer | ( ( "IX" | "IY" ) "+" Z80Integer ) ) "]" .

  Z80Register          =  Z80Register8bit | Z80Register16bit .

  Z80Register8bit      =   "A"
                         | "H"
                         | "L"
                         | "B"
                         | "C"
                         | "D"
                         | "E" .

  Z80Register16bit     =   "AF"
                         | "BC"
                         | "HL"
                         | "DE"
                         | "IX"
                         | "IY"
                         | "SP"
                         | "PC" .

//////////////////////////////////////////////////////////////////////////

  ConstIdent   = identifier .

  NewIdent     = identifier .

  Identifier   = identifier .

  IdentList    = identifier { "," identifier } .

  UnsignedInt  = integer | hexinteger .

  UnsignedReal = real .

  String       = string .

END Z80Pascal .
