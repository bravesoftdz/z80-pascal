COMPILER minipas
(* Smaller version of Pascal for Z80-Pascal 1.0

   The idea is to define a Pascal subset so it can be used to build the first
   functional Z80-Pascal compiler.  Then both language and compiler should be
   extended to be a full Pascal compiler.

   Pascal keywords in uppercase for easy identification.

   This grammar should be LL(1).
 *)

IGNORE CASE

CHARACTERS
  eol      = CHR(13) .
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit    = "0123456789" .
  hexdigit = digit + "ABCDEFabcdef" .
  alfanum  = letter + digit .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  =  letter { alfanum } .
  integer     =  digit { digit } | digit { digit } .
  hexinteger  =  "$" hexdigit { hexdigit } .

PRODUCTIONS

  minipas      = "PROGRAM" NewIdent ";" Block "." .

  Block        = Declarations StatementPart .

  Declarations = ConstDefinitions
                 TypeDefinitions VarDeclarations
                 { ProcDeclarations } .

(* -------------------------------------------------------------------- *)

  ConstDefinitions  = [ "CONST" ConstDef { ConstDef } ] .

  ConstDef          = NewIdent "=" Constant ";" .

  Constant          = [ "+" | "-" ] UnsignedLiteral .

(* -------------------------------------------------------------------- *)

  TypeDefinitions = [ "TYPE" TypeDef { TypeDef } ] .

  TypeDef         = NewIdent "=" Type ";" .

  Type            = SimpleType | StructType .

  SimpleType      = "BOOLEAN" | "INTEGER" | Identifier .

  StructType      = ArrayType | RecordType .

  ArrayType       = "ARRAY" "[" IndexList "]" "OF" Type .

  IndexList       = UnsignedLiteral { "," UnsignedLiteral } .

  RecordType      = "RECORD" FieldList { ";" FieldList } "END" .

  FieldList       = [ IdentList ":" Type ] .

(* -------------------------------------------------------------------- *)

  VarDeclarations = [ "VAR" { IdentList ":" Type ";" } ] .

(* -------------------------------------------------------------------- *)

  ProcDeclarations = ( ProcHeading | FuncHeading ) ";" Body ";" .

  ProcHeading      = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading      = "FUNCTION" NewIdent [ FormalParams ] ReturnType .

  ReturnType       = ":" TypeIdent .

  Body             = "FORWARD" | Block .

  FormalParams     = "(" [ FPSection { ";" FPSection } ] ")"  .

  FPSection        = [ "VAR" ] IdentList ":" Type .

(* -------------------------------------------------------------------- *)

  StatementPart     = CompoundStatement | ASMCompoundStatement .

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | ASMCompoundStatement
                        | WhileStatement
                        | IfStatement ] .

  AssignmentOrCall  = Designator ( ":=" Expression | [ ActualParams ] ) .

  ActualParams      = "(" Expression { "," Expression } ")" .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

(* -------------------------------------------------------------------- *)

  BooleanExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" .

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = Identifier { "." Identifier | "[" ExpList "]" } .

  ExpList           = Expression { "," Expression } .

  UnsignedLiteral   = UnsignedInt | ConstIdent .

(* -------------------------------------------------------------------- *)

(* This is a simple Z80 Assembler parser.  Note that it allows illegal
   assembler instructions! *)

(* TODO: Revisit this section. *)

  ASMCompoundStatement = "ASM" [Z80StatementSequence] "END" .

  Z80StatementSequence = Z80Statement { ";" Z80Statement } .

  Z80Statement         = Z80Instruction [ Z80Parameter [ "," Z80Parameter ] ] .

  Z80Instruction       = "ADC" | "ADD" | "AND" | "BIT" | "CALL" | "CCF" | "CP" | "CPD" | "CPDR" | "CPI" | "CPIR" | "CPL" | "DAA" | "DEC" | "DI" | "DJNZ," | "EI" | "EX" | "EXX" | "HALT" | "IM" | "IN" | "INC" | "IND" | "INDR" | "INI" | "INIR" | "JP" | "JR" | "LD" | "LDD" | "LDDR" | "LDI" | "LDIR" | "NEG" | "NOP" | "OR" | "OTDR" | "OTIR" | "OUT" | "OUTD" | "OUTI" | "POP" | "PUSH" | "RES" | "RET" | "RETI" | "RETN" | "RL" |"RLA" | "RLC" | "RLCA" | "RLD" | "RR" | "RRA" | "RRC" | "RRD" | "RST" | "SCF" | "SET" | "SLA" | "SRA" | "SBC" | "SUB" | "XOR" .

  Z80Parameter         =   Z80Integer
                         | Z80Condition
                         | Z80Indirection
                         | Z80Register .

  Z80Integer           =   integer | hexinteger .

  Z80Condition         =  "M" | "NC" | "NP" | "NZ" | "P" | "PE" | "PO" | "Z" . (* Carriage exactly the same than register ("C"). *)

  Z80Indirection       = "[" ( "BC" | "DE" | "HL" | Z80Integer | ( ( "IX" | "IY" ) "+" Z80Integer ) ) "]" .

  Z80Register          =  Z80Register8bit | Z80Register16bit .

  Z80Register8bit      =   "A"
                         | "H"
                         | "L"
                         | "B"
                         | "C"
                         | "D"
                         | "E" .

  Z80Register16bit     =   "AF"
                         | "BC"
                         | "HL"
                         | "DE"
                         | "IX"
                         | "IY"
                         | "SP"
                         | "PC" .

(* -------------------------------------------------------------------- *)

  ConstIdent  = identifier .

  NewIdent    = identifier .

  Identifier  = identifier .

  IdentList   = identifier { "," identifier } .

  UnsignedInt = integer | hexinteger .

END minipas .
