COMPILER z80pas0
(* Smaller version of Pascal for Z80-Pascal WIP.

   The idea is to define a Pascal subset to build the first functional
   Z80-Pascal compiler.  Then both language and compiler should be extended to
   be a full Pascal (even Object Pascal) compiler.

   Diferences with J & W Pascal:
    - No decimal numbers (so no REAL types).
    - No program external files.
    - No labels.
    - No struct types (except ARRAY), so no RECORD, SET OF nor FILE OF.
    - No enumeration types.
    - No subrange types.
    - No PACKED types.
    - No VAR parameters.
    - No CASE .. OF statement.
    - No WITH .. DO statement.
    - Operators "/" and "DIV" are the same (due to no REAL types support).

   Differences with modern Pascal and Object Pascal:
    - No UNITs.
    - No LIBRARYes.
    - No CLASSes nor OBJECTs.
    - No OUT parameters.
    - No ARRAY OF CONST parameters.
    - No dynamic ARRAY.
    - No ASM blocks.

   Pascal keywords are uppercase for easy identification.

   NOTES:

     Some productions needs to be tested as J & W Pascal define that parts in a
     different way.  I tried to make it simpler and being LL(1)/LL(0) but may
     be I failed and complexity is needed.
      - Constant
      - UnsignedLiteral
      - BooleanExpression/Expression (J & W define several aliases)
      - MulOp (check precedence for SHR and SHL)

 *)

IGNORE CASE

CHARACTERS
  eol       = CHR(13) . // Use also CHR(10) and CHR(13)CHR(10).
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit     = "0123456789" .
  hexdigit   = digit + "ABCDEFabcdef" .
  alfanum    = letter + digit .
  identfirst = letter + "_" .
  identchar = alfanum + "_" .
  noQuote   = ANY - "'" - eol .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  =  identfirst { identchar } .
  integer     =  digit { digit } .
  hexinteger  =  "$" hexdigit { hexdigit } .
  string      = "'" { noQuote | "''" } "'" .

PRODUCTIONS

  z80pas0         = "PROGRAM" NewIdent ";" Block "." .

  Block           = DeclarationPart StatementPart .

  DeclarationPart = ConstDefinitions
                    TypeDefinitions VarDeclarations
                    { ProcDeclarations } .

(* -------------------------------------------------------------------- *)

  ConstDefinitions  = [ "CONST" ConstDef { ConstDef } ] .

  ConstDef          = NewIdent "=" Constant ";" .

  Constant          = [ "+" | "-" ] UnsignedLiteral | String .

(* -------------------------------------------------------------------- *)

  TypeDefinitions = [ "TYPE" TypeDef { TypeDef } ] .

  TypeDef         = NewIdent "=" Type ";" .

  Type            = SimpleType | StructType | "^" TypeIdent .

  SimpleType      = TypeIdent .

  StructType      = ArrayType .

  ArrayType       = "ARRAY" "[" IndexList "]" "OF" Type .

  IndexList       = UnsignedLiteral { "," UnsignedLiteral } .

(* -------------------------------------------------------------------- *)

  VarDeclarations = [ "VAR" VarDecl { VarDecl } ] .

  VarDecl         = NewIdentList ":" Type ";" .

(* -------------------------------------------------------------------- *)

  ProcDeclarations = ( ProcHeading | FuncHeading ) ";" Body ";" .

  ProcHeading      = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading      = "FUNCTION" NewIdent [ FormalParams ] ReturnType .

  ReturnType       = ":" TypeIdent .

  Body             = "FORWARD" | Block .

  FormalParams     = "(" [ FPSection { ";" FPSection } ] ")"  .

  FPSection        = NewIdentList ":" Type .

(* -------------------------------------------------------------------- *)

  StatementPart     = CompoundStatement .

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | WhileStatement
                        | RepeatStatement
                        | IfStatement
                        | ForStatement ] .

  AssignmentOrCall  = Designator ( ":=" Expression | [ ActualParams ] ) .

  ActualParams      = "(" Expression { "," Expression } ")" .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  RepeatStatement   = "REPEAT" StatementSequence "UNTIL" BooleanExpression .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

  ForStatement      = "FOR" ControlVariable ":=" Expression { "TO" | "DOWNTO" ) Expression "DO" Statement .

  ControlVariable   = identifier .

(* -------------------------------------------------------------------- *)

  BooleanExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" | "SHR" | "SHL" .
// Not sure SHR and SHR should be here though.

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = Identifier { "[" ExpList "]" } .

  ExpList           = Expression { "," Expression } .

  UnsignedLiteral   = UnsignedInt | "NIL" | String .

(* -------------------------------------------------------------------- *)

  ConstIdent   = identifier .

  NewIdentList = NewIdent { "," NewIdent } .

  NewIdent     = identifier .

  TypeIdent    = identifier .

  Identifier   = identifier .

  IdentList    = identifier { "," identifier } .

  UnsignedInt  = integer | hexinteger .

  String       = string .

END minipas .
