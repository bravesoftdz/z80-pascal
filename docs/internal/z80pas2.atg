COMPILER z80pas2
// Smaller version of Pascal for Z80-Pascal WIP.
//
// The idea is to define a more complete Pascal (still subset) to evolve to the
// final complete Z80-Pascal compiler.

IGNORE CASE

CHARACTERS
  eol       = CHR(13) . // Use also CHR(10) and CHR(13)CHR(10).
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit     = "0123456789" .
  hexdigit   = digit + "ABCDEFabcdef" .
  noQuote   = ANY - "'" - eol .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  =  (letter | "_") { letter | "_" | digit } .
  integer     =  digit { digit } .
  hexinteger  =  "$" hexdigit { hexdigit } .
  real        =  digit { digit } "." digit { digit } .
  string      = "'" { noQuote | "''" } "'" .

PRODUCTIONS

  Z80Pascal       = "PROGRAM" Identifier ";" Block "." .

  Block           = DeclarationPart CompoundStatement .

  DeclarationPart = { ConstDefinitions | VarDeclarations | ProcDeclarations } .

//////////////////////////////////////////////////////////////////////////

  ConstDefinitions = [ "CONST" ConstDef { ConstDef } ] .

  ConstDef         = Identifier "=" Constant ";" .

  Constant         = [ "+" | "-" ] ( UnsignedNumber | Identifier ) | String .

//////////////////////////////////////////////////////////////////////////

  VarDeclarations = [ "VAR" VarDecl { VarDecl } ] .

  VarDecl         = IdentList ":" Type ";" .

//////////////////////////////////////////////////////////////////////////

  ProcDeclarations = [ ( ProcHeading | FuncHeading ) ";" Body ";" . ]

  ProcHeading      = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading      = "FUNCTION" NewIdent [ FormalParams ] ":" Type .

  Body             = "FORWARD" | Block .

  FormalParams     = "(" [ FPSection { ";" FPSection } ] ")"  .

  FPSection        = IdentList ":" Type .

//////////////////////////////////////////////////////////////////////////

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | WhileStatement
                        | RepeatStatement
                        | ForStatement
                        | IfStatement ] .

  AssignmentOrCall  = Designator ( ":=" Expression | [ ActualParams ] ) .

  ActualParams      = "(" Expression { "," Expression } ")" .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  RepeatStatement   = "REPEAT" StatementSequence "UNTIL" BooleanExpression .

  ForStatement      = "FOR" Identifier ":=" SimpleExpression
                      ( "TO" | "DOWNTO" ) SimpleExpression "DO" Statement .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

//////////////////////////////////////////////////////////////////////////

  BooleanExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" | "SHL" | "SHR" .

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = Identifier .

  UnsignedLiteral   = UnsignedNumber | String .

//////////////////////////////////////////////////////////////////////////

  Type           = AtomType .

  AtomType       =   "CHAR" | "BYTE" | "INTEGER" | "WORD" | "REAL"
                   | "BOOLEAN" | "STRING" .

  IdentList      = Identifier { "," Identifier } .

  Identifier     = identifier .

  UnsignedNumber = UnsignedInt | UnsignedReal .

  UnsignedInt    = integer | hexinteger .

  UnsignedReal   = real .

  String         = string .

END z80pas2 .
