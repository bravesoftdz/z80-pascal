COMPILER z80pas1
// Smaller version of Pascal for Z80-Pascal WIP.
//
// The idea is to define a Pascal subset to build the first functional
// Z80-Pascal compiler.  Then both language and compiler should be extended to
// be a full Pascal (even Object Pascal) compiler.

IGNORE CASE

CHARACTERS
  eol       = CHR(13) . // Use also CHR(10) and CHR(13)CHR(10).
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  digit     = "0123456789" .
  hexdigit   = digit + "ABCDEFabcdef" .

IGNORE CHR(9) .. CHR(13)

COMMENTS FROM "(*" TO "*)"
COMMENTS FROM "{" TO "}"

TOKENS
  identifier  =  (letter | "_") { letter | "_" | digit } .
  integer     =  digit { digit } .
  hexinteger  =  "$" hexdigit { hexdigit } .

PRODUCTIONS

  Z80Pascal       = "PROGRAM" Identifier ";" Block "." .

  Block           = DeclarationPart CompoundStatement .

  DeclarationPart = { VarDeclarations | ProcDeclarations } .

//////////////////////////////////////////////////////////////////////////

  VarDeclarations = [ "VAR" VarDecl { VarDecl } ] .

  VarDecl         = IdentList ":" Type ";" .

//////////////////////////////////////////////////////////////////////////

  ProcDeclarations = [ ( ProcHeading | FuncHeading ) ";" Body ";" . ]

  ProcHeading      = "PROCEDURE" NewIdent [ FormalParams ] .

  FuncHeading      = "FUNCTION" NewIdent [ FormalParams ] ":" Type .

  Body             = "FORWARD" | Block .

  FormalParams     = "(" [ FPSection { ";" FPSection } ] ")"  .

  FPSection        = IdentList ":" Type .

//////////////////////////////////////////////////////////////////////////

  CompoundStatement = "BEGIN" StatementSequence "END" .

  StatementSequence = Statement { ";" Statement } .

  Statement         = [   AssignmentOrCall
                        | CompoundStatement
                        | WhileStatement
                        | RepeatStatement
                        | IfStatement ] .

  AssignmentOrCall  = Designator ( ":=" Expression | [ ActualParams ] ) .

  ActualParams      = "(" Expression { "," Expression } ")" .

  WhileStatement    = "WHILE" BooleanExpression "DO" Statement .

  RepeatStatement   = "REPEAT" StatementSequence "UNTIL" BooleanExpression .

  IfStatement       = "IF" BooleanExpression "THEN" Statement
                      [ "ELSE" Statement ] .

//////////////////////////////////////////////////////////////////////////

  BooleanExpression = Expression .

  Expression        = SimpleExpression [ RelOp SimpleExpression ] .

  RelOp             = "=" | "<" | ">" | "<=" | ">=" | "<>" .

  SimpleExpression  = ( "+" Term | "-" Term | Term ) { AddOp Term } .

  AddOp             = "+" | "-" | "OR" .

  Term              = Factor { MulOp Factor } .

  MulOp             = "*" | "/" | "DIV" | "MOD" | "AND" .

  Factor            =   Designator [ ActualParams ]
                      | UnsignedLiteral
                      | "(" Expression ")"
                      | "NOT" Factor .

  Designator        = Identifier .

  UnsignedLiteral   = UnsignedNumber .

//////////////////////////////////////////////////////////////////////////

  Type           = AtomType .

  AtomType       = "BYTE" | "INTEGER" | "WORD" | "BOOLEAN" .

  IdentList      = Identifier { "," Identifier } .

  Identifier     = identifier .

  UnsignedNumber = UnsignedInt .

  UnsignedInt    = integer | hexinteger .

END z80pas1 .
