UNIT Z80PasP;
(* Parser generated by Coco/R (Pascal version) *)

INTERFACE

PROCEDURE Parse;

FUNCTION Successful : BOOLEAN;
(* Returns TRUE if no errors have been recorded while parsing *)

PROCEDURE SynError (errNo: INTEGER);
(* Report syntax error with specified errNo *)

PROCEDURE SemError (errNo: INTEGER);
(* Report semantic error with specified errNo *)

PROCEDURE LexString (VAR Lex : STRING);
(* Retrieves Lex as exact spelling of current token *)

PROCEDURE LexName (VAR Lex : STRING);
(* Retrieves Lex as name of current token (capitalized if IGNORE CASE) *)

PROCEDURE LookAheadString (VAR Lex : STRING);
(* Retrieves Lex as exact spelling of lookahead token *)

PROCEDURE LookAheadName (VAR Lex : STRING);
(* Retrieves Lex as name of lookahead token (capitalized if IGNORE CASE) *)

IMPLEMENTATION

USES Z80PasS;




CONST
  maxT = 144;
  minErrDist  =  2;  (* minimal distance (good tokens) between two errors *)
  setsize     = 16;  (* sets are stored in 16 bits *)

TYPE
  BITSET = SET OF 0 .. 15;
  SymbolSet = ARRAY [0 .. maxT DIV setsize] OF BITSET;

VAR
  symSet:  ARRAY [0 ..  10] OF SymbolSet; (*symSet[0] = allSyncSyms*)
  errDist: INTEGER;   (* number of symbols recognized since last error *)
  sym:     INTEGER;   (* current input symbol *)

PROCEDURE  SemError (errNo: INTEGER);
  BEGIN
    IF errDist >= minErrDist THEN BEGIN
      Z80PasS.Error(errNo, Z80PasS.line, Z80PasS.col, Z80PasS.pos);
    END;
    errDist := 0;
  END;

PROCEDURE  SynError (errNo: INTEGER);
  BEGIN
    IF errDist >= minErrDist THEN BEGIN
      Z80PasS.Error(errNo, Z80PasS.nextLine, Z80PasS.nextCol, Z80PasS.nextPos);
    END;
    errDist := 0;
  END;

PROCEDURE  Get;
  VAR
    s: STRING;
  BEGIN
    REPEAT
      Z80PasS.Get(sym);
      IF sym <= maxT THEN
        INC(errDist)
      ELSE BEGIN
        
      END;
    UNTIL sym <= maxT
  END;

FUNCTION  _In (VAR s: SymbolSet; x: INTEGER): BOOLEAN;
  BEGIN
    _In := x MOD setsize IN s[x DIV setsize];
  END;

PROCEDURE  Expect (n: INTEGER);
  BEGIN
    IF sym = n THEN Get ELSE SynError(n);
  END;

PROCEDURE  ExpectWeak (n, follow: INTEGER);
  BEGIN
    IF sym = n
    THEN Get
    ELSE BEGIN
      SynError(n); WHILE NOT _In(symSet[follow], sym) DO Get;
    END
  END;

FUNCTION  WeakSeparator (n, syFol, repFol: INTEGER): BOOLEAN;
  VAR
    s: SymbolSet;
    i: INTEGER;
  BEGIN
    IF sym = n
    THEN BEGIN Get; WeakSeparator := TRUE; EXIT; END
    ELSE IF _In(symSet[repFol], sym) THEN BEGIN WeakSeparator := FALSE; exit END
    ELSE BEGIN
      i := 0;
      WHILE i <= maxT DIV setsize DO BEGIN
        s[i] := symSet[0, i] + symSet[syFol, i] + symSet[repFol, i]; INC(i)
      END;
      SynError(n); WHILE NOT _In(s, sym) DO Get;
      WeakSeparator := _In(symSet[syFol], sym)
    END
  END;

PROCEDURE LexName (VAR Lex : STRING);
  BEGIN
    Z80PasS.GetName(Z80PasS.pos, Z80PasS.len, Lex)
  END;

PROCEDURE LexString (VAR Lex : STRING);
  BEGIN
    Z80PasS.GetString(Z80PasS.pos, Z80PasS.len, Lex)
  END;

PROCEDURE LookAheadName (VAR Lex : STRING);
  BEGIN
    Z80PasS.GetName(Z80PasS.nextPos, Z80PasS.nextLen, Lex)
  END;

PROCEDURE LookAheadString (VAR Lex : STRING);
  BEGIN
    Z80PasS.GetString(Z80PasS.nextPos, Z80PasS.nextLen, Lex)
  END;

FUNCTION Successful : BOOLEAN;
  BEGIN
    Successful := Z80PasS.errors = 0
  END;

PROCEDURE _Z80Register16bit; FORWARD;
PROCEDURE _Z80Integer; FORWARD;
PROCEDURE _Z80Condition; FORWARD;
PROCEDURE _Z80Register8bit; FORWARD;
PROCEDURE _Z80Indirection; FORWARD;
PROCEDURE _Z80Parameter8bit; FORWARD;
PROCEDURE _Z80Parameter; FORWARD;
PROCEDURE _Z80Register; FORWARD;
PROCEDURE _Z80Sub; FORWARD;
PROCEDURE _Z80Restart; FORWARD;
PROCEDURE _Z80Rotate; FORWARD;
PROCEDURE _Z80Return; FORWARD;
PROCEDURE _Z80Stack; FORWARD;
PROCEDURE _Z80Load; FORWARD;
PROCEDURE _Z80RelativeJump; FORWARD;
PROCEDURE _Z80Jump; FORWARD;
PROCEDURE _Z80Port; FORWARD;
PROCEDURE _Z80Loop; FORWARD;
PROCEDURE _Z80InterruptMode; FORWARD;
PROCEDURE _Z80Exchange; FORWARD;
PROCEDURE _Z80Operation; FORWARD;
PROCEDURE _Z80Inc; FORWARD;
PROCEDURE _Z80Test; FORWARD;
PROCEDURE _Z80Call; FORWARD;
PROCEDURE _Z80Bit; FORWARD;
PROCEDURE _Z80Bin; FORWARD;
PROCEDURE _Z80Sum; FORWARD;
PROCEDURE _Z80Statement; FORWARD;
PROCEDURE _Z80StatementSequence; FORWARD;
PROCEDURE _Member; FORWARD;
PROCEDURE _ExpList; FORWARD;
PROCEDURE _SetConstructor; FORWARD;
PROCEDURE _UnsignedLiteral; FORWARD;
PROCEDURE _MulOp; FORWARD;
PROCEDURE _Factor; FORWARD;
PROCEDURE _AddOp; FORWARD;
PROCEDURE _Term; FORWARD;
PROCEDURE _RelOp; FORWARD;
PROCEDURE _SimpleExpression; FORWARD;
PROCEDURE _RecVarList; FORWARD;
PROCEDURE _ControlVariable; FORWARD;
PROCEDURE _CaseLabel; FORWARD;
PROCEDURE _OneCase; FORWARD;
PROCEDURE _CaseList; FORWARD;
PROCEDURE _OrdinalExpression; FORWARD;
PROCEDURE _BooleanExpression; FORWARD;
PROCEDURE _IntegerExpression; FORWARD;
PROCEDURE _FieldWidth; FORWARD;
PROCEDURE _ActualParameter; FORWARD;
PROCEDURE _Expression; FORWARD;
PROCEDURE _ActualParams; FORWARD;
PROCEDURE _Value; FORWARD;
PROCEDURE _Designator; FORWARD;
PROCEDURE _WithStatement; FORWARD;
PROCEDURE _ForStatement; FORWARD;
PROCEDURE _CaseStatement; FORWARD;
PROCEDURE _IfStatement; FORWARD;
PROCEDURE _RepeatStatement; FORWARD;
PROCEDURE _WhileStatement; FORWARD;
PROCEDURE _AssignmentOrCall; FORWARD;
PROCEDURE _Statement; FORWARD;
PROCEDURE _StatementSequence; FORWARD;
PROCEDURE _ASMCompoundStatement; FORWARD;
PROCEDURE _CompoundStatement; FORWARD;
PROCEDURE _IndexSpec; FORWARD;
PROCEDURE _IndexSpecList; FORWARD;
PROCEDURE _ParamType; FORWARD;
PROCEDURE _ParamGroup; FORWARD;
PROCEDURE _FormalSection; FORWARD;
PROCEDURE _ReturnType; FORWARD;
PROCEDURE _FormalParams; FORWARD;
PROCEDURE _Body; FORWARD;
PROCEDURE _FuncHeading; FORWARD;
PROCEDURE _ProcHeading; FORWARD;
PROCEDURE _VarDecl; FORWARD;
PROCEDURE _CaseLabelList; FORWARD;
PROCEDURE _Variant; FORWARD;
PROCEDURE _VariantSelector; FORWARD;
PROCEDURE _RecordSection; FORWARD;
PROCEDURE _VariantPart; FORWARD;
PROCEDURE _fixedPart; FORWARD;
PROCEDURE _FieldList; FORWARD;
PROCEDURE _IndexList; FORWARD;
PROCEDURE _FileType; FORWARD;
PROCEDURE _SetType; FORWARD;
PROCEDURE _RecordType; FORWARD;
PROCEDURE _ArrayType; FORWARD;
PROCEDURE _NewIdentList; FORWARD;
PROCEDURE _SubrangeType; FORWARD;
PROCEDURE _EnumerationType; FORWARD;
PROCEDURE _TypeIdent; FORWARD;
PROCEDURE _StructType; FORWARD;
PROCEDURE _SimpleType; FORWARD;
PROCEDURE _Type; FORWARD;
PROCEDURE _TypeDef; FORWARD;
PROCEDURE _UnsignedReal; FORWARD;
PROCEDURE _UnsignedInt; FORWARD;
PROCEDURE _String; FORWARD;
PROCEDURE _ConstIdent; FORWARD;
PROCEDURE _UnsignedNumber; FORWARD;
PROCEDURE _Constant; FORWARD;
PROCEDURE _ConstDef; FORWARD;
PROCEDURE _ProcDeclarations; FORWARD;
PROCEDURE _VarDeclarations; FORWARD;
PROCEDURE _TypeDefinitions; FORWARD;
PROCEDURE _ConstDefinitions; FORWARD;
PROCEDURE _StatementPart; FORWARD;
PROCEDURE _DeclarationPart; FORWARD;
PROCEDURE _Block; FORWARD;
PROCEDURE _NewIdent; FORWARD;
PROCEDURE _PascalProgram; FORWARD;
PROCEDURE _Z80Pas; FORWARD;

PROCEDURE _Z80Register16bit;
  BEGIN
    CASE sym OF
      111 : BEGIN
        Get;
        END;
      108 : BEGIN
        Get;
        END;
      141 : BEGIN
        Get;
        END;
      113 : BEGIN
        Get;
        END;
      109 : BEGIN
        Get;
        END;
      110 : BEGIN
        Get;
        END;
      142 : BEGIN
        Get;
        END;
      143 : BEGIN
        Get;
        END;
    ELSE BEGIN SynError(145);
        END;
    END;
  END;

PROCEDURE _Z80Integer;
  BEGIN
    IF (sym = 2) OR (sym = 3) THEN BEGIN
      _UnsignedInt;
    END ELSE IF (sym = 1) OR (sym = 36) THEN BEGIN
      IF (sym = 36) THEN BEGIN
        Get;
      END;
      Expect(1);
    END ELSE BEGIN SynError(146);
    END;
  END;

PROCEDURE _Z80Condition;
  BEGIN
    IF (sym = 133) THEN BEGIN
      Get;
    END ELSE IF (sym = 134) THEN BEGIN
      Get;
    END ELSE IF (sym = 116) THEN BEGIN
      Get;
    END ELSE IF (sym = 135) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(147);
    END;
  END;

PROCEDURE _Z80Register8bit;
  BEGIN
    CASE sym OF
      131 : BEGIN
        Get;
        END;
      136 : BEGIN
        Get;
        END;
      137 : BEGIN
        Get;
        END;
      138 : BEGIN
        Get;
        END;
      116 : BEGIN
        Get;
        END;
      139 : BEGIN
        Get;
        END;
      140 : BEGIN
        Get;
        END;
    ELSE BEGIN SynError(148);
        END;
    END;
  END;

PROCEDURE _Z80Indirection;
  BEGIN
    Expect(20);
    IF (sym = 1) OR (sym = 2) OR (sym = 3) OR (sym = 36) THEN BEGIN
      _Z80Integer;
    END ELSE IF _In(symSet[1], sym) THEN BEGIN
      _Z80Register16bit;
      IF (sym = 11) THEN BEGIN
        Get;
        Expect(2);
      END;
    END ELSE BEGIN SynError(149);
    END;
    Expect(21);
  END;

PROCEDURE _Z80Parameter8bit;
  BEGIN
    IF (sym = 1) OR (sym = 2) OR (sym = 3) OR (sym = 36) THEN BEGIN
      _Z80Integer;
    END ELSE IF (sym = 20) THEN BEGIN
      _Z80Indirection;
    END ELSE IF _In(symSet[2], sym) THEN BEGIN
      _Z80Register8bit;
    END ELSE BEGIN SynError(150);
    END;
  END;

PROCEDURE _Z80Parameter;
  BEGIN
    IF (sym = 1) OR (sym = 2) OR (sym = 3) OR (sym = 36) THEN BEGIN
      _Z80Integer;
    END ELSE IF (sym = 20) THEN BEGIN
      _Z80Indirection;
    END ELSE IF _In(symSet[3], sym) THEN BEGIN
      _Z80Register;
    END ELSE BEGIN SynError(151);
    END;
  END;

PROCEDURE _Z80Register;
  BEGIN
    IF _In(symSet[2], sym) THEN BEGIN
      _Z80Register8bit;
    END ELSE IF _In(symSet[1], sym) THEN BEGIN
      _Z80Register16bit;
    END ELSE BEGIN SynError(152);
    END;
  END;

PROCEDURE _Z80Sub;
  BEGIN
    IF (sym = 130) THEN BEGIN
      Get;
      IF (sym = 131) THEN BEGIN
        Get;
      END ELSE IF (sym = 108) THEN BEGIN
        Get;
      END ELSE BEGIN SynError(153);
      END;
      _Z80Parameter;
    END ELSE IF (sym = 132) THEN BEGIN
      Get;
      _Z80Integer;
    END ELSE BEGIN SynError(154);
    END;
  END;

PROCEDURE _Z80Restart;
  BEGIN
    Expect(129);
    _UnsignedInt;
  END;

PROCEDURE _Z80Rotate;
  BEGIN
    CASE sym OF
      123 : BEGIN
        Get;
        END;
      124 : BEGIN
        Get;
        END;
      125 : BEGIN
        Get;
        END;
      126 : BEGIN
        Get;
        END;
      127 : BEGIN
        Get;
        END;
      128 : BEGIN
        Get;
        END;
    ELSE BEGIN SynError(155);
        END;
    END;
    _Z80Parameter8bit;
  END;

PROCEDURE _Z80Return;
  BEGIN
    Expect(122);
    IF (sym = 116) OR (sym = 133) OR (sym = 134) OR (sym = 135) THEN BEGIN
      _Z80Condition;
    END;
  END;

PROCEDURE _Z80Stack;
  BEGIN
    IF (sym = 120) THEN BEGIN
      Get;
    END ELSE IF (sym = 121) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(156);
    END;
    _Z80Register16bit;
  END;

PROCEDURE _Z80Load;
  BEGIN
    Expect(119);
    _Z80Parameter;
    Expect(23);
    _Z80Parameter;
  END;

PROCEDURE _Z80RelativeJump;
  BEGIN
    Expect(118);
    IF (sym = 116) OR (sym = 133) OR (sym = 134) OR (sym = 135) THEN BEGIN
      _Z80Condition;
      Expect(23);
    END;
    _Z80Integer;
  END;

PROCEDURE _Z80Jump;
  BEGIN
    Expect(117);
    IF (sym = 116) OR (sym = 133) OR (sym = 134) OR (sym = 135) THEN BEGIN
      _Z80Condition;
      Expect(23);
    END;
    _Z80Parameter;
  END;

PROCEDURE _Z80Port;
  BEGIN
    IF (sym = 53) THEN BEGIN
      Get;
      _Z80Register8bit;
      Expect(23);
      Expect(20);
      _Z80Integer;
      Expect(21);
    END ELSE IF (sym = 115) THEN BEGIN
      Get;
      Expect(20);
      IF (sym = 1) OR (sym = 2) OR (sym = 3) OR (sym = 36) THEN BEGIN
        _Z80Integer;
      END ELSE IF (sym = 116) THEN BEGIN
        Get;
      END ELSE BEGIN SynError(157);
      END;
      Expect(21);
      Expect(23);
      _Z80Register8bit;
    END ELSE BEGIN SynError(158);
    END;
  END;

PROCEDURE _Z80Loop;
  BEGIN
    Expect(105);
    _Z80Integer;
  END;

PROCEDURE _Z80InterruptMode;
  BEGIN
    Expect(114);
    Expect(2);
  END;

PROCEDURE _Z80Exchange;
  BEGIN
    Expect(106);
    IF (sym = 107) THEN BEGIN
      Get;
      Expect(23);
      IF (sym = 108) THEN BEGIN
        Get;
      END ELSE IF (sym = 109) THEN BEGIN
        Get;
      END ELSE IF (sym = 110) THEN BEGIN
        Get;
      END ELSE BEGIN SynError(159);
      END;
    END ELSE IF (sym = 111) THEN BEGIN
      Get;
      Expect(23);
      Expect(112);
    END ELSE IF (sym = 113) THEN BEGIN
      Get;
      Expect(23);
      Expect(108);
    END ELSE BEGIN SynError(160);
    END;
  END;

PROCEDURE _Z80Operation;
  BEGIN
    CASE sym OF
      72 : BEGIN
        Get;
        END;
      73 : BEGIN
        Get;
        END;
      74 : BEGIN
        Get;
        END;
      75 : BEGIN
        Get;
        END;
      76 : BEGIN
        Get;
        END;
      77 : BEGIN
        Get;
        END;
      78 : BEGIN
        Get;
        END;
      79 : BEGIN
        Get;
        END;
      80 : BEGIN
        Get;
        END;
      81 : BEGIN
        Get;
        END;
      82 : BEGIN
        Get;
        END;
      83 : BEGIN
        Get;
        END;
      84 : BEGIN
        Get;
        END;
      85 : BEGIN
        Get;
        END;
      86 : BEGIN
        Get;
        END;
      87 : BEGIN
        Get;
        END;
      88 : BEGIN
        Get;
        END;
      89 : BEGIN
        Get;
        END;
      90 : BEGIN
        Get;
        END;
      91 : BEGIN
        Get;
        END;
      92 : BEGIN
        Get;
        END;
      93 : BEGIN
        Get;
        END;
      94 : BEGIN
        Get;
        END;
      95 : BEGIN
        Get;
        END;
      96 : BEGIN
        Get;
        END;
      97 : BEGIN
        Get;
        END;
      98 : BEGIN
        Get;
        END;
      99 : BEGIN
        Get;
        END;
      100 : BEGIN
        Get;
        END;
      101 : BEGIN
        Get;
        END;
      102 : BEGIN
        Get;
        END;
      103 : BEGIN
        Get;
        END;
      104 : BEGIN
        Get;
        END;
    ELSE BEGIN SynError(161);
        END;
    END;
  END;

PROCEDURE _Z80Inc;
  BEGIN
    IF (sym = 70) THEN BEGIN
      Get;
      _Z80Register;
    END ELSE IF (sym = 71) THEN BEGIN
      Get;
      IF _In(symSet[3], sym) THEN BEGIN
        _Z80Register;
      END ELSE IF (sym = 20) THEN BEGIN
        _Z80Indirection;
      END ELSE BEGIN SynError(162);
      END;
    END ELSE BEGIN SynError(163);
    END;
  END;

PROCEDURE _Z80Test;
  BEGIN
    Expect(69);
    _Z80Parameter8bit;
  END;

PROCEDURE _Z80Call;
  BEGIN
    Expect(68);
    IF (sym = 116) OR (sym = 133) OR (sym = 134) OR (sym = 135) THEN BEGIN
      _Z80Condition;
      Expect(23);
    END;
    _Z80Integer;
  END;

PROCEDURE _Z80Bit;
  BEGIN
    IF (sym = 66) THEN BEGIN
      Get;
    END ELSE IF (sym = 67) THEN BEGIN
      Get;
    END ELSE IF (sym = 26) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(164);
    END;
    Expect(2);
    Expect(23);
    IF (sym = 20) THEN BEGIN
      _Z80Indirection;
    END ELSE IF _In(symSet[2], sym) THEN BEGIN
      _Z80Register8bit;
    END ELSE BEGIN SynError(165);
    END;
  END;

PROCEDURE _Z80Bin;
  BEGIN
    IF (sym = 59) THEN BEGIN
      Get;
    END ELSE IF (sym = 54) THEN BEGIN
      Get;
    END ELSE IF (sym = 65) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(166);
    END;
    _Z80Parameter8bit;
  END;

PROCEDURE _Z80Sum;
  BEGIN
    IF (sym = 63) THEN BEGIN
      Get;
    END ELSE IF (sym = 64) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(167);
    END;
    _Z80Register;
    Expect(23);
    _Z80Parameter;
  END;

PROCEDURE _Z80Statement;
  BEGIN
    IF _In(symSet[4], sym) THEN BEGIN
      CASE sym OF
        63, 64 : BEGIN
          _Z80Sum;
          END;
        54, 59, 65 : BEGIN
          _Z80Bin;
          END;
        26, 66, 67 : BEGIN
          _Z80Bit;
          END;
        68 : BEGIN
          _Z80Call;
          END;
        69 : BEGIN
          _Z80Test;
          END;
        70, 71 : BEGIN
          _Z80Inc;
          END;
        72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104 : BEGIN
          _Z80Operation;
          END;
        106 : BEGIN
          _Z80Exchange;
          END;
        114 : BEGIN
          _Z80InterruptMode;
          END;
        105 : BEGIN
          _Z80Loop;
          END;
        53, 115 : BEGIN
          _Z80Port;
          END;
        117 : BEGIN
          _Z80Jump;
          END;
        118 : BEGIN
          _Z80RelativeJump;
          END;
        119 : BEGIN
          _Z80Load;
          END;
        120, 121 : BEGIN
          _Z80Stack;
          END;
        122 : BEGIN
          _Z80Return;
          END;
        123, 124, 125, 126, 127, 128 : BEGIN
          _Z80Rotate;
          END;
        129 : BEGIN
          _Z80Restart;
          END;
        130, 132 : BEGIN
          _Z80Sub;
          END;
      END;
    END;
  END;

PROCEDURE _Z80StatementSequence;
  BEGIN
    _Z80Statement;
    WHILE (sym = 7) DO BEGIN
      Get;
      _Z80Statement;
    END;
  END;

PROCEDURE _Member;
  BEGIN
    _Expression;
    IF (sym = 18) THEN BEGIN
      Get;
      _Expression;
    END;
  END;

PROCEDURE _ExpList;
  BEGIN
    _Expression;
    WHILE (sym = 23) DO BEGIN
      Get;
      _Expression;
    END;
  END;

PROCEDURE _SetConstructor;
  BEGIN
    Expect(20);
    _Member;
    WHILE (sym = 23) DO BEGIN
      Get;
      _Member;
    END;
    Expect(21);
  END;

PROCEDURE _UnsignedLiteral;
  BEGIN
    IF (sym = 2) OR (sym = 3) OR (sym = 4) THEN BEGIN
      _UnsignedNumber;
    END ELSE IF (sym = 61) THEN BEGIN
      Get;
    END ELSE IF (sym = 5) THEN BEGIN
      _String;
    END ELSE BEGIN SynError(168);
    END;
  END;

PROCEDURE _MulOp;
  BEGIN
    IF (sym = 55) THEN BEGIN
      Get;
    END ELSE IF (sym = 56) THEN BEGIN
      Get;
    END ELSE IF (sym = 57) THEN BEGIN
      Get;
    END ELSE IF (sym = 58) THEN BEGIN
      Get;
    END ELSE IF (sym = 59) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(169);
    END;
  END;

PROCEDURE _Factor;
  BEGIN
    IF (sym = 1) THEN BEGIN
      _Designator;
      IF (sym = 16) THEN BEGIN
        _ActualParams;
      END;
    END ELSE IF (sym = 2) OR (sym = 3) OR (sym = 4) OR (sym = 5) OR (sym = 61) THEN BEGIN
      _UnsignedLiteral;
    END ELSE IF (sym = 20) THEN BEGIN
      _SetConstructor;
    END ELSE IF (sym = 16) THEN BEGIN
      Get;
      _Expression;
      Expect(17);
    END ELSE IF (sym = 60) THEN BEGIN
      Get;
      _Factor;
    END ELSE BEGIN SynError(170);
    END;
  END;

PROCEDURE _AddOp;
  BEGIN
    IF (sym = 11) THEN BEGIN
      Get;
    END ELSE IF (sym = 12) THEN BEGIN
      Get;
    END ELSE IF (sym = 54) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(171);
    END;
  END;

PROCEDURE _Term;
  BEGIN
    _Factor;
    WHILE (sym = 55) OR (sym = 56) OR (sym = 57) OR (sym = 58) OR (sym = 59) DO BEGIN
      _MulOp;
      _Factor;
    END;
  END;

PROCEDURE _RelOp;
  BEGIN
    CASE sym OF
      10 : BEGIN
        Get;
        END;
      48 : BEGIN
        Get;
        END;
      49 : BEGIN
        Get;
        END;
      50 : BEGIN
        Get;
        END;
      51 : BEGIN
        Get;
        END;
      52 : BEGIN
        Get;
        END;
      53 : BEGIN
        Get;
        END;
    ELSE BEGIN SynError(172);
        END;
    END;
  END;

PROCEDURE _SimpleExpression;
  BEGIN
    IF (sym = 11) THEN BEGIN
      Get;
      _Term;
    END ELSE IF (sym = 12) THEN BEGIN
      Get;
      _Term;
    END ELSE IF _In(symSet[5], sym) THEN BEGIN
      _Term;
    END ELSE BEGIN SynError(173);
    END;
    WHILE (sym = 11) OR (sym = 12) OR (sym = 54) DO BEGIN
      _AddOp;
      _Term;
    END;
  END;

PROCEDURE _RecVarList;
  BEGIN
    _Designator;
    WHILE (sym = 23) DO BEGIN
      Get;
      _Designator;
    END;
  END;

PROCEDURE _ControlVariable;
  BEGIN
    Expect(1);
  END;

PROCEDURE _CaseLabel;
  BEGIN
    _Constant;
  END;

PROCEDURE _OneCase;
  BEGIN
    _CaseLabelList;
    Expect(28);
    _Statement;
  END;

PROCEDURE _CaseList;
  BEGIN
    _OneCase;
    WHILE (sym = 7) DO BEGIN
      Get;
      _OneCase;
    END;
    IF (sym = 7) THEN BEGIN
      Get;
    END;
  END;

PROCEDURE _OrdinalExpression;
  BEGIN
    _Expression;
  END;

PROCEDURE _BooleanExpression;
  BEGIN
    _Expression;
  END;

PROCEDURE _IntegerExpression;
  BEGIN
    _Expression;
  END;

PROCEDURE _FieldWidth;
  BEGIN
    Expect(28);
    _IntegerExpression;
    IF (sym = 28) THEN BEGIN
      Get;
      _IntegerExpression;
    END;
  END;

PROCEDURE _ActualParameter;
  BEGIN
    _Value;
    IF (sym = 28) THEN BEGIN
      _FieldWidth;
    END;
  END;

PROCEDURE _Expression;
  BEGIN
    _SimpleExpression;
    IF _In(symSet[6], sym) THEN BEGIN
      _RelOp;
      _SimpleExpression;
    END;
  END;

PROCEDURE _ActualParams;
  BEGIN
    Expect(16);
    _ActualParameter;
    WHILE (sym = 23) DO BEGIN
      Get;
      _ActualParameter;
    END;
    Expect(17);
  END;

PROCEDURE _Value;
  BEGIN
    IF (sym = 36) THEN BEGIN
      Get;
      _Designator;
    END ELSE IF _In(symSet[7], sym) THEN BEGIN
      _Expression;
    END ELSE BEGIN SynError(174);
    END;
  END;

PROCEDURE _Designator;
  BEGIN
    Expect(1);
    WHILE (sym = 8) OR (sym = 15) OR (sym = 20) DO BEGIN
      IF (sym = 8) THEN BEGIN
        Get;
        Expect(1);
      END ELSE IF (sym = 20) THEN BEGIN
        Get;
        _ExpList;
        Expect(21);
      END ELSE BEGIN
        Get;
      END;
    END;
  END;

PROCEDURE _WithStatement;
  BEGIN
    Expect(47);
    _RecVarList;
    Expect(38);
    _Statement;
  END;

PROCEDURE _ForStatement;
  BEGIN
    Expect(44);
    _ControlVariable;
    Expect(35);
    _OrdinalExpression;
    IF (sym = 45) THEN BEGIN
      Get;
    END ELSE IF (sym = 46) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(175);
    END;
    _OrdinalExpression;
    Expect(38);
    _Statement;
  END;

PROCEDURE _CaseStatement;
  BEGIN
    Expect(29);
    _OrdinalExpression;
    Expect(22);
    _CaseList;
    Expect(25);
  END;

PROCEDURE _IfStatement;
  BEGIN
    Expect(41);
    _BooleanExpression;
    Expect(42);
    _Statement;
    IF (sym = 43) THEN BEGIN
      Get;
      _Statement;
    END;
  END;

PROCEDURE _RepeatStatement;
  BEGIN
    Expect(39);
    _StatementSequence;
    Expect(40);
    _BooleanExpression;
  END;

PROCEDURE _WhileStatement;
  BEGIN
    Expect(37);
    _BooleanExpression;
    Expect(38);
    _Statement;
  END;

PROCEDURE _AssignmentOrCall;
  BEGIN
    _Designator;
    IF (sym = 35) THEN BEGIN
      Get;
      _Value;
    END ELSE IF (sym = 7) OR (sym = 16) OR (sym = 25) OR (sym = 40) OR (sym = 43) THEN BEGIN
      IF (sym = 16) THEN BEGIN
        _ActualParams;
      END;
    END ELSE BEGIN SynError(176);
    END;
  END;

PROCEDURE _Statement;
  BEGIN
    IF _In(symSet[8], sym) THEN BEGIN
      CASE sym OF
        1 : BEGIN
          _AssignmentOrCall;
          END;
        34 : BEGIN
          _CompoundStatement;
          END;
        62 : BEGIN
          _ASMCompoundStatement;
          END;
        37 : BEGIN
          _WhileStatement;
          END;
        39 : BEGIN
          _RepeatStatement;
          END;
        41 : BEGIN
          _IfStatement;
          END;
        29 : BEGIN
          _CaseStatement;
          END;
        44 : BEGIN
          _ForStatement;
          END;
        47 : BEGIN
          _WithStatement;
          END;
      END;
    END;
  END;

PROCEDURE _StatementSequence;
  BEGIN
    _Statement;
    WHILE (sym = 7) DO BEGIN
      Get;
      _Statement;
    END;
  END;

PROCEDURE _ASMCompoundStatement;
  BEGIN
    Expect(62);
    _Z80StatementSequence;
    Expect(25);
  END;

PROCEDURE _CompoundStatement;
  BEGIN
    Expect(34);
    _StatementSequence;
    Expect(25);
  END;

PROCEDURE _IndexSpec;
  BEGIN
    _NewIdent;
    Expect(18);
    _NewIdent;
    Expect(28);
    _TypeIdent;
  END;

PROCEDURE _IndexSpecList;
  BEGIN
    _IndexSpec;
    WHILE (sym = 7) DO BEGIN
      Get;
      _IndexSpec;
    END;
  END;

PROCEDURE _ParamType;
  BEGIN
    IF (sym = 1) THEN BEGIN
      _TypeIdent;
    END ELSE IF (sym = 19) THEN BEGIN
      Get;
      Expect(20);
      _IndexSpecList;
      Expect(21);
      Expect(22);
      _ParamType;
    END ELSE IF (sym = 14) THEN BEGIN
      Get;
      Expect(19);
      Expect(20);
      _IndexSpec;
      Expect(21);
      Expect(22);
      _TypeIdent;
    END ELSE BEGIN SynError(177);
    END;
  END;

PROCEDURE _ParamGroup;
  BEGIN
    _NewIdentList;
    Expect(28);
    _ParamType;
  END;

PROCEDURE _FormalSection;
  BEGIN
    IF (sym = 1) OR (sym = 30) THEN BEGIN
      IF (sym = 30) THEN BEGIN
        Get;
      END;
      _ParamGroup;
    END ELSE IF (sym = 31) THEN BEGIN
      _ProcHeading;
    END ELSE IF (sym = 32) THEN BEGIN
      _FuncHeading;
    END ELSE BEGIN SynError(178);
    END;
  END;

PROCEDURE _ReturnType;
  BEGIN
    IF (sym = 28) THEN BEGIN
      Get;
      _TypeIdent;
    END;
  END;

PROCEDURE _FormalParams;
  BEGIN
    Expect(16);
    _FormalSection;
    WHILE (sym = 7) DO BEGIN
      Get;
      _FormalSection;
    END;
    Expect(17);
  END;

PROCEDURE _Body;
  BEGIN
    IF _In(symSet[9], sym) THEN BEGIN
      _Block;
    END ELSE IF (sym = 33) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(179);
    END;
  END;

PROCEDURE _FuncHeading;
  BEGIN
    Expect(32);
    _NewIdent;
    IF (sym = 16) THEN BEGIN
      _FormalParams;
    END;
    _ReturnType;
  END;

PROCEDURE _ProcHeading;
  BEGIN
    Expect(31);
    _NewIdent;
    IF (sym = 16) THEN BEGIN
      _FormalParams;
    END;
  END;

PROCEDURE _VarDecl;
  BEGIN
    _NewIdentList;
    Expect(28);
    _Type;
    Expect(7);
  END;

PROCEDURE _CaseLabelList;
  BEGIN
    _CaseLabel;
    WHILE (sym = 23) DO BEGIN
      Get;
      _CaseLabel;
    END;
  END;

PROCEDURE _Variant;
  BEGIN
    _CaseLabelList;
    Expect(28);
    Expect(16);
    _FieldList;
    Expect(17);
  END;

PROCEDURE _VariantSelector;
  BEGIN
    IF (sym = 1) THEN BEGIN
      _NewIdent;
      Expect(28);
    END;
    _TypeIdent;
  END;

PROCEDURE _RecordSection;
  BEGIN
    _NewIdentList;
    Expect(28);
    _Type;
  END;

PROCEDURE _VariantPart;
  BEGIN
    Expect(29);
    _VariantSelector;
    Expect(22);
    _Variant;
    WHILE (sym = 7) DO BEGIN
      Get;
      _Variant;
    END;
  END;

PROCEDURE _fixedPart;
  BEGIN
    _RecordSection;
    WHILE (sym = 7) DO BEGIN
      Get;
      _RecordSection;
    END;
  END;

PROCEDURE _FieldList;
  BEGIN
    IF (sym = 1) OR (sym = 29) THEN BEGIN
      IF (sym = 1) THEN BEGIN
        _fixedPart;
        IF (sym = 7) THEN BEGIN
          Get;
          _VariantPart;
        END;
      END ELSE BEGIN
        _VariantPart;
      END;
      IF (sym = 7) THEN BEGIN
        Get;
      END;
    END;
  END;

PROCEDURE _IndexList;
  BEGIN
    _SimpleType;
    WHILE (sym = 23) DO BEGIN
      Get;
      _SimpleType;
    END;
  END;

PROCEDURE _FileType;
  BEGIN
    Expect(27);
    Expect(22);
    _Type;
  END;

PROCEDURE _SetType;
  BEGIN
    Expect(26);
    Expect(22);
    _SimpleType;
  END;

PROCEDURE _RecordType;
  BEGIN
    Expect(24);
    _FieldList;
    Expect(25);
  END;

PROCEDURE _ArrayType;
  BEGIN
    Expect(19);
    Expect(20);
    _IndexList;
    Expect(21);
    Expect(22);
    _Type;
  END;

PROCEDURE _NewIdentList;
  BEGIN
    _NewIdent;
    WHILE (sym = 23) DO BEGIN
      Get;
      _NewIdent;
    END;
  END;

PROCEDURE _SubrangeType;
  BEGIN
    _Constant;
    Expect(18);
    _Constant;
  END;

PROCEDURE _EnumerationType;
  BEGIN
    Expect(16);
    _NewIdentList;
    Expect(17);
  END;

PROCEDURE _TypeIdent;
  BEGIN
    Expect(1);
  END;

PROCEDURE _StructType;
  BEGIN
    IF (sym = 19) THEN BEGIN
      _ArrayType;
    END ELSE IF (sym = 24) THEN BEGIN
      _RecordType;
    END ELSE IF (sym = 26) THEN BEGIN
      _SetType;
    END ELSE IF (sym = 27) THEN BEGIN
      _FileType;
    END ELSE BEGIN SynError(180);
    END;
  END;

PROCEDURE _SimpleType;
  BEGIN
    IF (sym = 1) THEN BEGIN
      _TypeIdent;
    END ELSE IF (sym = 16) THEN BEGIN
      _EnumerationType;
    END ELSE IF (sym < 16) (* prevent range error *) AND
          (sym IN [1, 2, 3, 4, 5, 11, 12])  THEN BEGIN
      _SubrangeType;
    END ELSE BEGIN SynError(181);
    END;
  END;

PROCEDURE _Type;
  BEGIN
    IF _In(symSet[10], sym) THEN BEGIN
      _SimpleType;
    END ELSE IF (sym = 14) OR (sym = 19) OR (sym = 24) OR (sym = 26) OR (sym = 27) THEN BEGIN
      IF (sym = 14) THEN BEGIN
        Get;
      END;
      _StructType;
    END ELSE IF (sym = 15) THEN BEGIN
      Get;
      _TypeIdent;
    END ELSE BEGIN SynError(182);
    END;
  END;

PROCEDURE _TypeDef;
  BEGIN
    _NewIdent;
    Expect(10);
    _Type;
    Expect(7);
  END;

PROCEDURE _UnsignedReal;
  BEGIN
    Expect(4);
  END;

PROCEDURE _UnsignedInt;
  BEGIN
    IF (sym = 2) THEN BEGIN
      Get;
    END ELSE IF (sym = 3) THEN BEGIN
      Get;
    END ELSE BEGIN SynError(183);
    END;
  END;

PROCEDURE _String;
  BEGIN
    Expect(5);
  END;

PROCEDURE _ConstIdent;
  BEGIN
    Expect(1);
  END;

PROCEDURE _UnsignedNumber;
  BEGIN
    IF (sym = 2) OR (sym = 3) THEN BEGIN
      _UnsignedInt;
    END ELSE IF (sym = 4) THEN BEGIN
      _UnsignedReal;
    END ELSE BEGIN SynError(184);
    END;
  END;

PROCEDURE _Constant;
  BEGIN
    IF (sym < 16) (* prevent range error *) AND
       (sym IN [1, 2, 3, 4, 11, 12])  THEN BEGIN
      IF (sym = 11) OR (sym = 12) THEN BEGIN
        IF (sym = 11) THEN BEGIN
          Get;
        END ELSE BEGIN
          Get;
        END;
      END;
      IF (sym = 2) OR (sym = 3) OR (sym = 4) THEN BEGIN
        _UnsignedNumber;
      END ELSE IF (sym = 1) THEN BEGIN
        _ConstIdent;
      END ELSE BEGIN SynError(185);
      END;
    END ELSE IF (sym = 5) THEN BEGIN
      _String;
    END ELSE BEGIN SynError(186);
    END;
  END;

PROCEDURE _ConstDef;
  BEGIN
    _NewIdent;
    Expect(10);
    _Constant;
    Expect(7);
  END;

PROCEDURE _ProcDeclarations;
  BEGIN
    IF (sym = 31) THEN BEGIN
      _ProcHeading;
    END ELSE IF (sym = 32) THEN BEGIN
      _FuncHeading;
    END ELSE BEGIN SynError(187);
    END;
    Expect(7);
    _Body;
    Expect(7);
  END;

PROCEDURE _VarDeclarations;
  BEGIN
    IF (sym = 30) THEN BEGIN
      Get;
      _VarDecl;
      WHILE (sym = 1) DO BEGIN
        _VarDecl;
      END;
    END;
  END;

PROCEDURE _TypeDefinitions;
  BEGIN
    IF (sym = 13) THEN BEGIN
      Get;
      _TypeDef;
      WHILE (sym = 1) DO BEGIN
        _TypeDef;
      END;
    END;
  END;

PROCEDURE _ConstDefinitions;
  BEGIN
    IF (sym = 9) THEN BEGIN
      Get;
      _ConstDef;
      WHILE (sym = 1) DO BEGIN
        _ConstDef;
      END;
    END;
  END;

PROCEDURE _StatementPart;
  BEGIN
    IF (sym = 34) THEN BEGIN
      _CompoundStatement;
    END ELSE IF (sym = 62) THEN BEGIN
      _ASMCompoundStatement;
    END ELSE BEGIN SynError(188);
    END;
  END;

PROCEDURE _DeclarationPart;
  BEGIN
    _ConstDefinitions;
    _TypeDefinitions;
    _VarDeclarations;
    WHILE (sym = 31) OR (sym = 32) DO BEGIN
      _ProcDeclarations;
    END;
  END;

PROCEDURE _Block;
  BEGIN
    _DeclarationPart;
    _StatementPart;
  END;

PROCEDURE _NewIdent;
  BEGIN
    Expect(1);
  END;

PROCEDURE _PascalProgram;
  BEGIN
    Expect(6);
    _NewIdent;
    Expect(7);
    _Block;
    Expect(8);
  END;

PROCEDURE _Z80Pas;
  BEGIN
    _PascalProgram;
  END;



PROCEDURE  Parse;
  BEGIN
    _Reset; Get;
    _Z80Pas;

  END;

BEGIN
  errDist := minErrDist;
  symSet[ 0, 0] := [0];
  symSet[ 0, 1] := [];
  symSet[ 0, 2] := [];
  symSet[ 0, 3] := [];
  symSet[ 0, 4] := [];
  symSet[ 0, 5] := [];
  symSet[ 0, 6] := [];
  symSet[ 0, 7] := [];
  symSet[ 0, 8] := [];
  symSet[ 0, 9] := [];
  symSet[ 1, 0] := [];
  symSet[ 1, 1] := [];
  symSet[ 1, 2] := [];
  symSet[ 1, 3] := [];
  symSet[ 1, 4] := [];
  symSet[ 1, 5] := [];
  symSet[ 1, 6] := [12, 13, 14, 15];
  symSet[ 1, 7] := [1];
  symSet[ 1, 8] := [13, 14, 15];
  symSet[ 1, 9] := [];
  symSet[ 2, 0] := [];
  symSet[ 2, 1] := [];
  symSet[ 2, 2] := [];
  symSet[ 2, 3] := [];
  symSet[ 2, 4] := [];
  symSet[ 2, 5] := [];
  symSet[ 2, 6] := [];
  symSet[ 2, 7] := [4];
  symSet[ 2, 8] := [3, 8, 9, 10, 11, 12];
  symSet[ 2, 9] := [];
  symSet[ 3, 0] := [];
  symSet[ 3, 1] := [];
  symSet[ 3, 2] := [];
  symSet[ 3, 3] := [];
  symSet[ 3, 4] := [];
  symSet[ 3, 5] := [];
  symSet[ 3, 6] := [12, 13, 14, 15];
  symSet[ 3, 7] := [1, 4];
  symSet[ 3, 8] := [3, 8, 9, 10, 11, 12, 13, 14, 15];
  symSet[ 3, 9] := [];
  symSet[ 4, 0] := [];
  symSet[ 4, 1] := [10];
  symSet[ 4, 2] := [];
  symSet[ 4, 3] := [5, 6, 11, 15];
  symSet[ 4, 4] := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
  symSet[ 4, 5] := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
  symSet[ 4, 6] := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  symSet[ 4, 7] := [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
  symSet[ 4, 8] := [0, 1, 2, 4];
  symSet[ 4, 9] := [];
  symSet[ 5, 0] := [1, 2, 3, 4, 5];
  symSet[ 5, 1] := [0, 4];
  symSet[ 5, 2] := [];
  symSet[ 5, 3] := [12, 13];
  symSet[ 5, 4] := [];
  symSet[ 5, 5] := [];
  symSet[ 5, 6] := [];
  symSet[ 5, 7] := [];
  symSet[ 5, 8] := [];
  symSet[ 5, 9] := [];
  symSet[ 6, 0] := [10];
  symSet[ 6, 1] := [];
  symSet[ 6, 2] := [];
  symSet[ 6, 3] := [0, 1, 2, 3, 4, 5];
  symSet[ 6, 4] := [];
  symSet[ 6, 5] := [];
  symSet[ 6, 6] := [];
  symSet[ 6, 7] := [];
  symSet[ 6, 8] := [];
  symSet[ 6, 9] := [];
  symSet[ 7, 0] := [1, 2, 3, 4, 5, 11, 12];
  symSet[ 7, 1] := [0, 4];
  symSet[ 7, 2] := [];
  symSet[ 7, 3] := [12, 13];
  symSet[ 7, 4] := [];
  symSet[ 7, 5] := [];
  symSet[ 7, 6] := [];
  symSet[ 7, 7] := [];
  symSet[ 7, 8] := [];
  symSet[ 7, 9] := [];
  symSet[ 8, 0] := [1];
  symSet[ 8, 1] := [13];
  symSet[ 8, 2] := [2, 5, 7, 9, 12, 15];
  symSet[ 8, 3] := [14];
  symSet[ 8, 4] := [];
  symSet[ 8, 5] := [];
  symSet[ 8, 6] := [];
  symSet[ 8, 7] := [];
  symSet[ 8, 8] := [];
  symSet[ 8, 9] := [];
  symSet[ 9, 0] := [9, 13];
  symSet[ 9, 1] := [14, 15];
  symSet[ 9, 2] := [0, 2];
  symSet[ 9, 3] := [14];
  symSet[ 9, 4] := [];
  symSet[ 9, 5] := [];
  symSet[ 9, 6] := [];
  symSet[ 9, 7] := [];
  symSet[ 9, 8] := [];
  symSet[ 9, 9] := [];
  symSet[10, 0] := [1, 2, 3, 4, 5, 11, 12];
  symSet[10, 1] := [0];
  symSet[10, 2] := [];
  symSet[10, 3] := [];
  symSet[10, 4] := [];
  symSet[10, 5] := [];
  symSet[10, 6] := [];
  symSet[10, 7] := [];
  symSet[10, 8] := [];
  symSet[10, 9] := [];
END. (* Z80PasP *)
