UNIT Z80PasS;
(* Scanner generated by Coco/R (Pascal version) *)

INTERFACE

VAR
  src:         FILE;         (*source/list files. To be opened by the main pgm*)
  lst:         TEXT;
  directory:   STRING;       (*of source file*)
  line, col:   INTEGER;      (*line and column of current symbol*)
  len:         LONGINT;      (*length of current symbol*)
  pos:         LONGINT;      (*file position of current symbol*)
  nextLine:    INTEGER;      (*line of lookahead symbol*)
  nextCol:     INTEGER;      (*column of lookahead symbol*)
  nextLen:     LONGINT;      (*length of lookahead symbol*)
  nextPos:     LONGINT;      (*file position of lookahead symbol*)
  errors:      INTEGER;      (*number of detected errors*)
  Error:       PROCEDURE (nr, line, col: INTEGER; pos: LONGINT);

PROCEDURE Get (VAR sym: INTEGER);
(* Gets next symbol from source file *)

PROCEDURE GetString (pos: LONGINT; len: INTEGER; VAR s: STRING);
(* Retrieves exact string of max length len from position pos in source file *)

PROCEDURE GetName (pos: LONGINT; len: INTEGER; VAR s: STRING);
(* Retrieves name of symbol of length len at position pos in source file *)

FUNCTION CharAt (pos: LONGINT): CHAR;
(* Returns exact character at position pos in source file *)

PROCEDURE _Reset;
(* Reads and stores source file internally *)

IMPLEMENTATION

CONST
  no_Sym = 144; (*error token code*)
  (* not only for errors but also for not finished states of scanner analysis *)
  eof = #26; (*MS-DOS eof*)
  LF  = #10;
  CR  = #13;
  EF  = #0;
  EL  = CR;
  BlkSize = 16384;
TYPE
  BufBlock   = ARRAY [0 .. BlkSize-1] OF CHAR;
  Buffer     = ARRAY [0 .. 31] OF ^BufBlock;
  StartTable = ARRAY [0 .. 255] OF INTEGER;
  GetCH      = FUNCTION (pos: LONGINT) : CHAR;
VAR
  lastCh,
  ch:        CHAR;       (*current input character*)
  curLine:   INTEGER;    (*current input line (may be higher than line)*)
  lineStart: LONGINT;    (*start position of current line*)
  apx:       LONGINT;    (*length of appendix (CONTEXT phrase)*)
  oldEols:   INTEGER;    (*number of _EOLs in a comment*)
  bp, bp0:   LONGINT;    (*current position in buf
                           (bp0: position of current token)*)
  LBlkSize:  LONGINT;    (*BlkSize*)
  inputLen:  LONGINT;    (*source file size*)
  buf:       Buffer;     (*source buffer for low-level access*)
  start:     StartTable; (*start state for every character*)
  CurrentCh: GetCH;

PROCEDURE Err (nr, line, col: INTEGER; pos: LONGINT); FAR;
  BEGIN
    INC(errors)
  END;

PROCEDURE NextCh;
(* Return global variable ch *)
  BEGIN
    lastCh := ch; INC(bp); ch := CurrentCh(bp);
    IF (ch = EL) OR (ch = LF) AND (lastCh <> EL) THEN BEGIN
      INC(curLine); lineStart := bp
    END
  END;

FUNCTION Comment: BOOLEAN;
  LABEL
    999;
  VAR
    level, startLine: INTEGER;
    oldLineStart : LONGINT;
  BEGIN
    level := 1; startLine := curLine; oldLineStart := lineStart;
    IF (ch = '{') THEN BEGIN
      NextCh;
      WHILE TRUE DO BEGIN
        IF (ch = '}') THEN BEGIN
          DEC(level); oldEols := curLine - startLine; NextCh;
          IF level = 0 THEN BEGIN Comment := TRUE; GOTO 999; END;
        END ELSE IF ch = EF THEN BEGIN Comment := FALSE; GOTO 999; END
        ELSE NextCh;
      END; (* WHILE TRUE *)
    END;
    IF (ch = '(') THEN BEGIN
      NextCh;
      IF (ch = '*') THEN BEGIN
        NextCh;
        WHILE TRUE DO BEGIN
          IF (ch = '*') THEN BEGIN
            NextCh;
            IF (ch = ')') THEN BEGIN
              DEC(level); NextCh;
              IF level = 0 THEN BEGIN Comment := TRUE; GOTO 999; END
            END
          END ELSE IF ch = EF THEN BEGIN Comment := FALSE; GOTO 999; END
          ELSE NextCh;
        END; (* WHILE TRUE *)
      END ELSE BEGIN
        IF (ch = CR) OR (ch = LF) THEN BEGIN
          DEC(curLine); lineStart := oldLineStart
        END;
        DEC(bp); ch := lastCh; Comment := FALSE;
      END;
    END;
    Comment := FALSE;
    999:
  END;

PROCEDURE Get (VAR sym: INTEGER);
  VAR
    state: INTEGER;

  FUNCTION Equal (s: STRING): BOOLEAN;
    VAR
      i: INTEGER;
      q: LONGINT;
    BEGIN
      IF nextLen <> Length(s) THEN BEGIN Equal := FALSE; EXIT END;
      i := 1; q := bp0;
      WHILE i <= nextLen DO BEGIN
        IF CurrentCh(q) <> s[i] THEN BEGIN Equal := FALSE; EXIT END;
        INC(i); INC(q)
      END;
      Equal := TRUE
    END;

  PROCEDURE CheckLiteral;
    BEGIN
      CASE CurrentCh(bp0) OF
        'A': IF Equal('A') THEN BEGIN sym := 131; 
             END ELSE IF Equal('ADC') THEN BEGIN sym := 63; 
             END ELSE IF Equal('ADD') THEN BEGIN sym := 64; 
             END ELSE IF Equal('AF') THEN BEGIN sym := 111; 
             END ELSE IF Equal('AND') THEN BEGIN sym := 59; 
             END ELSE IF Equal('ARRAY') THEN BEGIN sym := 19; 
             END ELSE IF Equal('ASM') THEN BEGIN sym := 62; 
             END;
        'B': IF Equal('B') THEN BEGIN sym := 138; 
             END ELSE IF Equal('BC') THEN BEGIN sym := 141; 
             END ELSE IF Equal('BEGIN') THEN BEGIN sym := 34; 
             END ELSE IF Equal('BIT') THEN BEGIN sym := 66; 
             END;
        'C': IF Equal('C') THEN BEGIN sym := 116; 
             END ELSE IF Equal('CALL') THEN BEGIN sym := 68; 
             END ELSE IF Equal('CASE') THEN BEGIN sym := 29; 
             END ELSE IF Equal('CCF') THEN BEGIN sym := 72; 
             END ELSE IF Equal('CONST') THEN BEGIN sym := 9; 
             END ELSE IF Equal('CP') THEN BEGIN sym := 69; 
             END ELSE IF Equal('CPD') THEN BEGIN sym := 73; 
             END ELSE IF Equal('CPDR') THEN BEGIN sym := 74; 
             END ELSE IF Equal('CPI') THEN BEGIN sym := 75; 
             END ELSE IF Equal('CPIR') THEN BEGIN sym := 76; 
             END ELSE IF Equal('CPL') THEN BEGIN sym := 77; 
             END;
        'D': IF Equal('D') THEN BEGIN sym := 139; 
             END ELSE IF Equal('DAA') THEN BEGIN sym := 78; 
             END ELSE IF Equal('DE') THEN BEGIN sym := 113; 
             END ELSE IF Equal('DEC') THEN BEGIN sym := 70; 
             END ELSE IF Equal('DI') THEN BEGIN sym := 79; 
             END ELSE IF Equal('DIV') THEN BEGIN sym := 57; 
             END ELSE IF Equal('DO') THEN BEGIN sym := 38; 
             END ELSE IF Equal('DOWNTO') THEN BEGIN sym := 46; 
             END;
        'E': IF Equal('E') THEN BEGIN sym := 140; 
             END ELSE IF Equal('EI') THEN BEGIN sym := 80; 
             END ELSE IF Equal('ELSE') THEN BEGIN sym := 43; 
             END ELSE IF Equal('END') THEN BEGIN sym := 25; 
             END ELSE IF Equal('EX') THEN BEGIN sym := 106; 
             END ELSE IF Equal('EXX') THEN BEGIN sym := 81; 
             END;
        'F': IF Equal('FILE') THEN BEGIN sym := 27; 
             END ELSE IF Equal('FOR') THEN BEGIN sym := 44; 
             END ELSE IF Equal('FORWARD') THEN BEGIN sym := 33; 
             END ELSE IF Equal('FUNCTION') THEN BEGIN sym := 32; 
             END;
        'H': IF Equal('H') THEN BEGIN sym := 136; 
             END ELSE IF Equal('HALT') THEN BEGIN sym := 82; 
             END ELSE IF Equal('HL') THEN BEGIN sym := 108; 
             END;
        'I': IF Equal('IF') THEN BEGIN sym := 41; 
             END ELSE IF Equal('IM') THEN BEGIN sym := 114; 
             END ELSE IF Equal('IN') THEN BEGIN sym := 53; 
             END ELSE IF Equal('INC') THEN BEGIN sym := 71; 
             END ELSE IF Equal('IND') THEN BEGIN sym := 83; 
             END ELSE IF Equal('INDR') THEN BEGIN sym := 84; 
             END ELSE IF Equal('INI') THEN BEGIN sym := 85; 
             END ELSE IF Equal('INIR') THEN BEGIN sym := 86; 
             END ELSE IF Equal('IX') THEN BEGIN sym := 109; 
             END ELSE IF Equal('IY') THEN BEGIN sym := 110; 
             END;
        'J': IF Equal('JP') THEN BEGIN sym := 117; 
             END ELSE IF Equal('JR') THEN BEGIN sym := 118; 
             END;
        'L': IF Equal('L') THEN BEGIN sym := 137; 
             END ELSE IF Equal('LD') THEN BEGIN sym := 119; 
             END ELSE IF Equal('LDD') THEN BEGIN sym := 87; 
             END ELSE IF Equal('LDDR') THEN BEGIN sym := 88; 
             END ELSE IF Equal('LDI') THEN BEGIN sym := 89; 
             END ELSE IF Equal('LDIR') THEN BEGIN sym := 90; 
             END;
        'M': IF Equal('MOD') THEN BEGIN sym := 58; 
             END;
        'N': IF Equal('NC') THEN BEGIN sym := 135; 
             END ELSE IF Equal('NEG') THEN BEGIN sym := 91; 
             END ELSE IF Equal('NIL') THEN BEGIN sym := 61; 
             END ELSE IF Equal('NOP') THEN BEGIN sym := 92; 
             END ELSE IF Equal('NOT') THEN BEGIN sym := 60; 
             END ELSE IF Equal('NZ') THEN BEGIN sym := 134; 
             END;
        'O': IF Equal('OF') THEN BEGIN sym := 22; 
             END ELSE IF Equal('OR') THEN BEGIN sym := 54; 
             END ELSE IF Equal('OTDR') THEN BEGIN sym := 93; 
             END ELSE IF Equal('OTIR') THEN BEGIN sym := 94; 
             END ELSE IF Equal('OUT') THEN BEGIN sym := 115; 
             END ELSE IF Equal('OUTD') THEN BEGIN sym := 95; 
             END ELSE IF Equal('OUTI') THEN BEGIN sym := 96; 
             END;
        'P': IF Equal('PACKED') THEN BEGIN sym := 14; 
             END ELSE IF Equal('PC') THEN BEGIN sym := 143; 
             END ELSE IF Equal('POP') THEN BEGIN sym := 121; 
             END ELSE IF Equal('PROCEDURE') THEN BEGIN sym := 31; 
             END ELSE IF Equal('PROGRAM') THEN BEGIN sym := 6; 
             END ELSE IF Equal('PUSH') THEN BEGIN sym := 120; 
             END;
        'R': IF Equal('RECORD') THEN BEGIN sym := 24; 
             END ELSE IF Equal('REPEAT') THEN BEGIN sym := 39; 
             END ELSE IF Equal('RES') THEN BEGIN sym := 67; 
             END ELSE IF Equal('RET') THEN BEGIN sym := 122; 
             END ELSE IF Equal('RETI') THEN BEGIN sym := 97; 
             END ELSE IF Equal('RETN') THEN BEGIN sym := 98; 
             END ELSE IF Equal('RL') THEN BEGIN sym := 123; 
             END ELSE IF Equal('RLA') THEN BEGIN sym := 99; 
             END ELSE IF Equal('RLC') THEN BEGIN sym := 124; 
             END ELSE IF Equal('RLCA') THEN BEGIN sym := 100; 
             END ELSE IF Equal('RLD') THEN BEGIN sym := 101; 
             END ELSE IF Equal('RR') THEN BEGIN sym := 125; 
             END ELSE IF Equal('RRA') THEN BEGIN sym := 102; 
             END ELSE IF Equal('RRC') THEN BEGIN sym := 126; 
             END ELSE IF Equal('RRD') THEN BEGIN sym := 103; 
             END ELSE IF Equal('RST') THEN BEGIN sym := 129; 
             END;
        'S': IF Equal('SBC') THEN BEGIN sym := 130; 
             END ELSE IF Equal('SCF') THEN BEGIN sym := 104; 
             END ELSE IF Equal('SET') THEN BEGIN sym := 26; 
             END ELSE IF Equal('SLA') THEN BEGIN sym := 127; 
             END ELSE IF Equal('SP') THEN BEGIN sym := 142; 
             END ELSE IF Equal('SRA') THEN BEGIN sym := 128; 
             END ELSE IF Equal('SUB') THEN BEGIN sym := 132; 
             END;
        'T': IF Equal('THEN') THEN BEGIN sym := 42; 
             END ELSE IF Equal('TO') THEN BEGIN sym := 45; 
             END ELSE IF Equal('TYPE') THEN BEGIN sym := 13; 
             END;
        'U': IF Equal('UNTIL') THEN BEGIN sym := 40; 
             END;
        'V': IF Equal('VAR') THEN BEGIN sym := 30; 
             END;
        'W': IF Equal('WHILE') THEN BEGIN sym := 37; 
             END ELSE IF Equal('WITH') THEN BEGIN sym := 47; 
             END;
        'X': IF Equal('XOR') THEN BEGIN sym := 65; 
             END;
        'Z': IF Equal('Z') THEN BEGIN sym := 133; 
             END;
      ELSE BEGIN END
      END
    END;

  BEGIN (*Get*)
    WHILE (ch = ' ') OR
          ((ch >= CHR(9)) AND (ch <= CHR(13))) DO NextCh;
    IF ((ch = '{') OR (ch = '(')) AND Comment THEN BEGIN Get(sym); EXIT; END;
    pos := nextPos;   nextPos := bp;
    col := nextCol;   nextCol := bp - lineStart;
    line := nextLine; nextLine := curLine;
    len := nextLen;   nextLen := 0;
    apx := 0; state := start[ORD(ch)]; bp0 := bp;
    WHILE TRUE DO BEGIN
      NextCh; INC(nextLen);
      CASE state OF
         1: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'Z')) THEN BEGIN 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
         2: BEGIN bp := bp - apx - 1; DEC(nextLen, apx); NextCh; BEGIN sym := 2; EXIT; END; END;
         3: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'F')) THEN BEGIN state := 4; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         4: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'F')) THEN BEGIN 
            END ELSE BEGIN sym := 3; EXIT; END;
         5: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE IF (ch = 'E') THEN BEGIN state := 6; 
            END ELSE BEGIN sym := 4; EXIT; END;
         6: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 8; 
            END ELSE IF ((ch = '+') OR
                  (ch = '-')) THEN BEGIN state := 7; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         7: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 8; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
         8: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE BEGIN sym := 4; EXIT; END;
         9: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 11; 
            END ELSE IF ((ch = '+') OR
                  (ch = '-')) THEN BEGIN state := 10; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        10: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 11; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        11: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE BEGIN sym := 4; EXIT; END;
        12: IF ((ch <= CHR(12)) OR
               (ch >= CHR(14)) AND (ch <= '&') OR
               (ch >= '(')) THEN BEGIN 
            END ELSE IF (ch = CHR(39)) THEN BEGIN state := 14; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        13: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN 
            END ELSE IF (ch = '.') THEN BEGIN state := 15; INC(apx) 
            END ELSE IF (ch = 'E') THEN BEGIN state := 9; 
            END ELSE BEGIN sym := 2; EXIT; END;
        14: IF (ch = CHR(39)) THEN BEGIN state := 12; 
            END ELSE BEGIN sym := 5; EXIT; END;
        15: IF ((ch >= '0') AND (ch <= '9')) THEN BEGIN state := 5; apx := 0 
            END ELSE IF (ch = '.') THEN BEGIN state := 2; INC(apx) 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        16: BEGIN sym := 7; EXIT; END;
        17: IF (ch = '.') THEN BEGIN state := 24; 
            END ELSE BEGIN sym := 8; EXIT; END;
        18: BEGIN sym := 10; EXIT; END;
        19: BEGIN sym := 11; EXIT; END;
        20: BEGIN sym := 12; EXIT; END;
        21: BEGIN sym := 15; EXIT; END;
        22: BEGIN sym := 16; EXIT; END;
        23: BEGIN sym := 17; EXIT; END;
        24: BEGIN sym := 18; EXIT; END;
        25: IF (ch = 'S') THEN BEGIN state := 39; 
            END ELSE BEGIN sym := 20; EXIT; END;
        26: BEGIN sym := 21; EXIT; END;
        27: BEGIN sym := 23; EXIT; END;
        28: IF (ch = '=') THEN BEGIN state := 29; 
            END ELSE BEGIN sym := 28; EXIT; END;
        29: BEGIN sym := 35; EXIT; END;
        30: BEGIN sym := 36; EXIT; END;
        31: IF (ch = '=') THEN BEGIN state := 33; 
            END ELSE IF (ch = '>') THEN BEGIN state := 35; 
            END ELSE BEGIN sym := 48; EXIT; END;
        32: IF (ch = '=') THEN BEGIN state := 34; 
            END ELSE BEGIN sym := 49; EXIT; END;
        33: BEGIN sym := 50; EXIT; END;
        34: BEGIN sym := 51; EXIT; END;
        35: BEGIN sym := 52; EXIT; END;
        36: BEGIN sym := 55; EXIT; END;
        37: BEGIN sym := 56; EXIT; END;
        38: BEGIN sym := 105; EXIT; END;
        39: IF (ch = 'P') THEN BEGIN state := 40; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        40: IF (ch = ']') THEN BEGIN state := 41; 
            END ELSE BEGIN sym := no_Sym; EXIT; END;
        41: BEGIN sym := 107; EXIT; END;
        42: BEGIN sym := 112; EXIT; END;
        43: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'I') OR
               (ch >= 'K') AND (ch <= 'Z')) THEN BEGIN state := 1; 
            END ELSE IF (ch = 'J') THEN BEGIN state := 45; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        44: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'E') OR
               (ch >= 'G') AND (ch <= 'Z')) THEN BEGIN state := 1; 
            END ELSE IF (ch = 'F') THEN BEGIN state := 46; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        45: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'M') OR
               (ch >= 'O') AND (ch <= 'Z')) THEN BEGIN state := 1; 
            END ELSE IF (ch = 'N') THEN BEGIN state := 47; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        46: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'Z')) THEN BEGIN state := 1; 
            END ELSE IF (ch = CHR(39)) THEN BEGIN state := 42; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        47: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'Y')) THEN BEGIN state := 1; 
            END ELSE IF (ch = 'Z') THEN BEGIN state := 48; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        48: IF ((ch >= '0') AND (ch <= '9') OR
               (ch >= 'A') AND (ch <= 'Z')) THEN BEGIN state := 1; 
            END ELSE IF (ch = ',') THEN BEGIN state := 38; 
            END ELSE BEGIN sym := 1; CheckLiteral; EXIT; END;
        49: BEGIN sym := 0; ch := #0; DEC(bp); EXIT END;
      ELSE BEGIN sym := no_Sym; EXIT (*NextCh already done*) END;
      END
    END
  END;

PROCEDURE GetString (pos: LONGINT; len: INTEGER; VAR s: STRING);
  VAR
    i: INTEGER;
    p: LONGINT;
  BEGIN
    IF len > 255 THEN len := 255;
    p := pos; i := 1;
    WHILE i <= len DO BEGIN
      s[i] := CharAt(p); INC(i); INC(p)
    END;
    s[0] := CHR(len);
  END;

PROCEDURE GetName (pos: LONGINT; len: INTEGER; VAR s: STRING);
  VAR
    i: INTEGER;
    p: LONGINT;
  BEGIN
    IF len > 255 THEN len := 255;
    p := pos; i := 1;
    WHILE i <= len DO BEGIN
      s[i] := CurrentCh(p); INC(i); INC(p)
    END;
    s[0] := CHR(len);
  END;

FUNCTION CharAt (pos: LONGINT): CHAR;
  VAR
    ch : CHAR;
  BEGIN
    IF pos >= inputLen THEN BEGIN CharAt := EF; EXIT; END;
    ch := buf[pos DIV LBlkSize]^[pos MOD LBlkSize];
    IF ch <> eof THEN CharAt := ch ELSE CharAt := EF
  END;

FUNCTION CapChAt (pos: LONGINT): CHAR; FAR;
  VAR
    ch : CHAR;
  BEGIN
    IF pos >= inputLen THEN BEGIN CapChAt := EF; EXIT; END;
    ch := upcase(buf[pos DIV LBlkSize]^[pos MOD LBlkSize]);
    IF ch <> eof THEN CapChAt := ch ELSE CapChAt := EF
  END;

PROCEDURE _Reset;
  VAR
    len: LONGINT;
    i, read: INTEGER;
  BEGIN (*assert: src has been opened*)
    len := FileSize(src); i := 0; inputLen := len;
    WHILE len > LBlkSize DO BEGIN
      NEW(buf[i]);
      read := BlkSize; BlockRead(src, buf[i]^, read);
      len := len - read; INC(i)
    END;
    NEW(buf[i]);
    read := len; BlockRead(src, buf[i]^, read);
    buf[i]^[read] := EF;
    curLine := 1; lineStart := -2; bp := -1;
    oldEols := 0; apx := 0; errors := 0;
    NextCh;
  END;

BEGIN
  CurrentCh := CapChAt;
  start[  0] := 49; start[  1] := 50; start[  2] := 50; start[  3] := 50; 
  start[  4] := 50; start[  5] := 50; start[  6] := 50; start[  7] := 50; 
  start[  8] := 50; start[  9] := 50; start[ 10] := 50; start[ 11] := 50; 
  start[ 12] := 50; start[ 13] := 50; start[ 14] := 50; start[ 15] := 50; 
  start[ 16] := 50; start[ 17] := 50; start[ 18] := 50; start[ 19] := 50; 
  start[ 20] := 50; start[ 21] := 50; start[ 22] := 50; start[ 23] := 50; 
  start[ 24] := 50; start[ 25] := 50; start[ 26] := 50; start[ 27] := 50; 
  start[ 28] := 50; start[ 29] := 50; start[ 30] := 50; start[ 31] := 50; 
  start[ 32] := 50; start[ 33] := 50; start[ 34] := 50; start[ 35] := 50; 
  start[ 36] :=  3; start[ 37] := 50; start[ 38] := 50; start[ 39] := 12; 
  start[ 40] := 22; start[ 41] := 23; start[ 42] := 36; start[ 43] := 19; 
  start[ 44] := 27; start[ 45] := 20; start[ 46] := 17; start[ 47] := 37; 
  start[ 48] := 13; start[ 49] := 13; start[ 50] := 13; start[ 51] := 13; 
  start[ 52] := 13; start[ 53] := 13; start[ 54] := 13; start[ 55] := 13; 
  start[ 56] := 13; start[ 57] := 13; start[ 58] := 28; start[ 59] := 16; 
  start[ 60] := 31; start[ 61] := 18; start[ 62] := 32; start[ 63] := 50; 
  start[ 64] := 30; start[ 65] := 44; start[ 66] :=  1; start[ 67] :=  1; 
  start[ 68] := 43; start[ 69] :=  1; start[ 70] :=  1; start[ 71] :=  1; 
  start[ 72] :=  1; start[ 73] :=  1; start[ 74] :=  1; start[ 75] :=  1; 
  start[ 76] :=  1; start[ 77] :=  1; start[ 78] :=  1; start[ 79] :=  1; 
  start[ 80] :=  1; start[ 81] :=  1; start[ 82] :=  1; start[ 83] :=  1; 
  start[ 84] :=  1; start[ 85] :=  1; start[ 86] :=  1; start[ 87] :=  1; 
  start[ 88] :=  1; start[ 89] :=  1; start[ 90] :=  1; start[ 91] := 25; 
  start[ 92] := 50; start[ 93] := 26; start[ 94] := 21; start[ 95] := 50; 
  start[ 96] := 50; start[ 97] := 50; start[ 98] := 50; start[ 99] := 50; 
  start[100] := 50; start[101] := 50; start[102] := 50; start[103] := 50; 
  start[104] := 50; start[105] := 50; start[106] := 50; start[107] := 50; 
  start[108] := 50; start[109] := 50; start[110] := 50; start[111] := 50; 
  start[112] := 50; start[113] := 50; start[114] := 50; start[115] := 50; 
  start[116] := 50; start[117] := 50; start[118] := 50; start[119] := 50; 
  start[120] := 50; start[121] := 50; start[122] := 50; start[123] := 50; 
  start[124] := 50; start[125] := 50; start[126] := 50; start[127] := 50; 
  start[128] := 50; start[129] := 50; start[130] := 50; start[131] := 50; 
  start[132] := 50; start[133] := 50; start[134] := 50; start[135] := 50; 
  start[136] := 50; start[137] := 50; start[138] := 50; start[139] := 50; 
  start[140] := 50; start[141] := 50; start[142] := 50; start[143] := 50; 
  start[144] := 50; start[145] := 50; start[146] := 50; start[147] := 50; 
  start[148] := 50; start[149] := 50; start[150] := 50; start[151] := 50; 
  start[152] := 50; start[153] := 50; start[154] := 50; start[155] := 50; 
  start[156] := 50; start[157] := 50; start[158] := 50; start[159] := 50; 
  start[160] := 50; start[161] := 50; start[162] := 50; start[163] := 50; 
  start[164] := 50; start[165] := 50; start[166] := 50; start[167] := 50; 
  start[168] := 50; start[169] := 50; start[170] := 50; start[171] := 50; 
  start[172] := 50; start[173] := 50; start[174] := 50; start[175] := 50; 
  start[176] := 50; start[177] := 50; start[178] := 50; start[179] := 50; 
  start[180] := 50; start[181] := 50; start[182] := 50; start[183] := 50; 
  start[184] := 50; start[185] := 50; start[186] := 50; start[187] := 50; 
  start[188] := 50; start[189] := 50; start[190] := 50; start[191] := 50; 
  start[192] := 50; start[193] := 50; start[194] := 50; start[195] := 50; 
  start[196] := 50; start[197] := 50; start[198] := 50; start[199] := 50; 
  start[200] := 50; start[201] := 50; start[202] := 50; start[203] := 50; 
  start[204] := 50; start[205] := 50; start[206] := 50; start[207] := 50; 
  start[208] := 50; start[209] := 50; start[210] := 50; start[211] := 50; 
  start[212] := 50; start[213] := 50; start[214] := 50; start[215] := 50; 
  start[216] := 50; start[217] := 50; start[218] := 50; start[219] := 50; 
  start[220] := 50; start[221] := 50; start[222] := 50; start[223] := 50; 
  start[224] := 50; start[225] := 50; start[226] := 50; start[227] := 50; 
  start[228] := 50; start[229] := 50; start[230] := 50; start[231] := 50; 
  start[232] := 50; start[233] := 50; start[234] := 50; start[235] := 50; 
  start[236] := 50; start[237] := 50; start[238] := 50; start[239] := 50; 
  start[240] := 50; start[241] := 50; start[242] := 50; start[243] := 50; 
  start[244] := 50; start[245] := 50; start[246] := 50; start[247] := 50; 
  start[248] := 50; start[249] := 50; start[250] := 50; start[251] := 50; 
  start[252] := 50; start[253] := 50; start[254] := 50; start[255] := 50; 
  Error := Err; LBlkSize := BlkSize; lastCh := EF;
END. (* Z80PasS *)
